/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/users/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * ログインユーザーの取得
     * @description <h2 id="">概要</h2>
     *     <p>このリクエストの認可セッションにおけるログインユーザーの情報を返します。</p>
     *     <p>freee人事労務では一人のログインユーザーを複数の事業所に関連付けられるため、このユーザーと関連のあるすべての事業所の情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>他のAPIのパラメータとしてcompany_idが求められる場合は、このAPIで取得したcompany_idを使用します。</li>
     *       <li>給与計算対象外の従業員のemployee_idとdisplay_nameは取得できません。</li>
     *     </ul>
     */
    get: operations['get_users_me']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/companies/{company_id}/employees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 全期間の従業員一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所に所属する従業員をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>退職ユーザーも含めて取得可能です。</li>
     *     </ul>
     */
    get: operations['get_company_employees']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した対象年月に事業所に所属する従業員をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>指定した年月に退職済みユーザーは取得できません。</li>
     *       <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
     *       <li>事業所が定額制の健康保険組合に加入している場合、保険料の直接指定金額は無視されnullが返されます。</li>
     *     </ul>
     */
    get: operations['get_employees']
    put?: never
    /**
     * 従業員の作成
     * @description <h2 id="">概要</h2>
     *     <p>従業員を新規作成します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    post: operations['create_employee']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定したIDの従業員を返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>指定した年月に退職済みユーザーは取得できません。</li>
     *       <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
     *       <li>事業所が定額制の健康保険組合に加入している場合、保険料の直接指定金額は無視されnullが返されます。</li>
     *     </ul>
     */
    get: operations['get_employee']
    /**
     * 従業員の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    put: operations['update_employee']
    post?: never
    /**
     * 従業員の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定したIDの従業員を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    delete: operations['destroy_employee']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/profile_rule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の姓名・住所などの取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の姓名などの情報を返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、給与計算対象外の従業員には非対応です。employee_idに給与計算対象外の従業員IDを指定した場合、本APIを利用できません。</li>
     *     </ul>
     */
    get: operations['get_employee_profile_rule']
    /**
     * 従業員の姓名・住所などの更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の姓名・住所などを更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、給与計算対象外の従業員には非対応です。employee_idに給与計算対象外の従業員IDを指定した場合、本APIを利用できません。</li>
     *     </ul>
     */
    put: operations['update_employee_profile_rule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/health_insurance_rule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の健康保険の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の健康保険情報を返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
     *     </ul>
     */
    get: operations['get_employee_health_insurance_rule']
    /**
     * 従業員の健康保険の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の健康保険情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の健康保険料の計算方法が自動計算の場合、給与計算時の健康保険料の直接指定金額はnullが返されます)</li>
     *       <li>事業所が定額制の健康保険組合に加入している場合、保険料の直接指定金額は無視されnullが返されます。</li>
     *       <li>事業所が定額制の健康保険組合に加入している場合、保険料の計算方法と保険料の更新はできません。</li>
     *     </ul>
     */
    put: operations['update_employee_health_insurance_rule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/welfare_pension_insurance_rule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の厚生年金保険の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の厚生年金保険情報を返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の厚生年金保険料の計算方法が自動計算の場合、給与計算時の厚生年金保険料の直接指定金額はnullが返されます)</li>
     *     </ul>
     */
    get: operations['get_employee_welfare_pension_insurance_rule']
    /**
     * 従業員の厚生年金保険の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の厚生年金保険情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>保険料計算方法が自動計算の場合、対応する保険料の直接指定金額は無視されnullが返されます。(例: 給与計算時の厚生年金保険料の計算方法が自動計算の場合、給与計算時の厚生年金保険料の直接指定金額はnullが返されます)</li>
     *     </ul>
     */
    put: operations['update_employee_welfare_pension_insurance_rule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/dependent_rules': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の家族情報の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の家族情報を返します。</p>
     */
    get: operations['get_employee_dependent_rules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/dependent_rules/bulk_update': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 従業員の家族情報の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の家族情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>idがない場合は新規作成、destroyがtrueの場合は削除になります。</li>
     *       <li>residence_type=live_in: 同居の場合、以下のパラメータに指定した値はWebに反映されません。</li>
     *       <ul>
     *         <li>zipcode1</li>
     *         <li>zipcode2</li>
     *         <li>prefecture_code</li>
     *         <li>address</li>
     *         <li>address_kana</li>
     *         <li>annual_remittance_amount</li>
     *       </ul>
     *       <li>residence_type=non_resident: 別居(国外)の場合、以下のパラメータに指定した値はWebに反映されません。</li>
     *       <ul>
     *         <li>prefecture_code</li>
     *       </ul>
     *     </ul>
     */
    put: operations['bulk_update_employee_dependent_rules']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/bank_account_rule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の銀行口座の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の銀行口座情報を返します。</p>
     */
    get: operations['get_employee_bank_account_rule']
    /**
     * 従業員の銀行口座の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の銀行口座1の情報を更新します。</p>
     */
    put: operations['update_employee_bank_account_rule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/basic_pay_rule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の基本給の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の基本給情報を返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    get: operations['get_employee_basic_pay_rule']
    /**
     * 従業員の基本給の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の基本給情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    put: operations['update_employee_basic_pay_rule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/profile_custom_fields': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員のカスタム項目の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付のカスタム項目情報を返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>指定年月に在籍していない従業員および給与計算対象外の従業員ではデータが存在しないため、空の配列が返ります。</li>
     *     </ul>
     */
    get: operations['get_employee_profile_custom_fields_rule']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/work_records/{date}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤怠の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の勤怠情報を返します。</p>
     */
    get: operations['get_employee_work_record']
    /**
     * 勤怠の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の勤怠情報を更新します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>振替出勤・振替休日・代休出勤・代休の登録はAPIでは行うことができません。</li>
     *     </ul>
     *
     *     <h2 id="_2">examples</h2>
     *     <ul>
     *       <li>出勤日について出退勤時刻および休憩時間を更新する場合は以下のようなパラメータをリクエストします。
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "break_records": [
     *               {
     *                 "clock_in_at": "2017-05-25 12:00:00",
     *                 "clock_out_at": "2017-05-25 13:00:00"
     *               }
     *             ],
     *             "work_record_segments": [
     *               {
     *                 "clock_in_at": "2017-05-25 09:10:00",
     *                 "clock_out_at": "2017-05-25 18:20:00"
     *               }
     *             ]
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>勤務パターンや既定の所定労働時間を変更する場合は use_default_work_pattern に false を指定するとともに、各設定を上書きするパラメータをリクエストします。
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "break_records": [
     *               {
     *                 "clock_in_at": "2017-05-25 12:00:00",
     *                 "clock_out_at": "2017-05-25 13:00:00"
     *               }
     *             ],
     *             "work_record_segments": [
     *               {
     *                 "clock_in_at": "2017-05-25 09:10:00",
     *                 "clock_out_at": "2017-05-25 18:20:00:00"
     *               }
     *             ],
     *             "day_pattern": "normal_day",
     *             "normal_work_clock_in_at": "2017-05-25 11:00:00",
     *             "normal_work_clock_out_at": "2017-12-20 20:00:00",
     *             "normal_work_mins": 0,
     *             "use_default_work_pattern": false
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>有給取得時の連携について半休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
     *         <ul>
     *           <li>half_paid_holiday_mins (半休により計上される所定労働時間を分で指定します)</li>
     *         </ul>
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "break_records": [
     *               {
     *                 "clock_in_at": "2023-12-22 12:00:00",
     *                 "clock_out_at": "2023-12-22 13:00:00"
     *               }
     *             ],
     *             "work_record_segments": [
     *               {
     *                 "clock_in_at": "2017-05-25 09:10:00",
     *                 "clock_out_at": "2017-05-25 18:20:00:00"
     *               }
     *             ],
     *             "half_paid_holiday_mins": 240
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>有給取得時の連携について午前休または午後休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
     *         <ul>
     *           <li>half_holiday_type (morning_off または afternoon_off を指定します)</li>
     *         </ul>
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "break_records": [
     *               {
     *                 "clock_in_at": "2023-12-22 16:00:00",
     *                 "clock_out_at": "2023-12-22 16:30:00"
     *               }
     *             ],
     *             "clock_in_at": "2023-12-22 14:00:00",
     *             "clock_out_at": "2023-12-22 18:00:00",
     *             "half_holiday_type": "morning_off"
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>特別休暇取得時の連携について全休の場合は以下の要素を指定することで API での勤怠をつけることができます。
     *         <ul>
     *           <li>special_holiday (全休の場合1.0を指定します)</li>
     *           <li>special_holiday_setting_id (特別休暇設定IDを指定します)</li>
     *         </ul>
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "special_holiday": 1.0
     *             "special_holiday_setting_id": 1
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>特別休暇取得時の連携について時間休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
     *         <ul>
     *           <li>special_holiday_setting_id (特別休暇設定IDを指定します)</li>
     *           <li>hourly_special_holiday_mins (時間休により計上される所定労働時間を分で指定します)</li>
     *         </ul>
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "break_records": [
     *               {
     *                 "clock_in_at": "2023-12-22 12:00:00",
     *                 "clock_out_at": "2023-12-22 13:00:00"
     *               }
     *             ],
     *             "work_record_segments": [
     *               {
     *                 "clock_in_at": "2017-05-25 09:10:00",
     *                 "clock_out_at": "2017-05-25 18:20:00:00"
     *               }
     *             ],
     *             "special_holiday_setting_id": 1,
     *             "hourly_special_holiday_mins": 120
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>特別休暇取得時の連携について午前休または午後休の場合は通常勤務のように勤務開始・終了時間を指定しつつ、加えて以下の要素を指定することで API での勤怠をつけることができます。
     *         <ul>
     *           <li>special_holiday_setting_id (特別休暇設定IDを指定します)</li>
     *           <li>half_holiday_type (morning_off または afternoon_off を指定します)</li>
     *         </ul>
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "break_records": [
     *               {
     *                 "clock_in_at": "2023-12-22 12:00:00",
     *                 "clock_out_at": "2023-12-22 12:30:00"
     *               }
     *             ],
     *             "clock_in_at": "2023-12-22 09:00:00",
     *             "clock_out_at": "2023-12-22 13:00:00",
     *             "special_holiday_setting_id": 1,
     *             "half_holiday_type": "afternoon_off"
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *       <li>欠勤を付ける場合は company_idとis_absence 以外のパラメータは必要ありません。
     *         <pre>
     *           <code>
     *           {
     *             "company_id": 1,
     *             "is_absence": true
     *           }
     *           </code>
     *         </pre>
     *       </li>
     *
     *     </ul>
     */
    put: operations['update_employee_work_record']
    post?: never
    /**
     * 勤怠の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の勤怠情報を削除します。</p>
     */
    delete: operations['destroy_employee_work_record']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/work_record_summaries/{year}/{month}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤怠情報月次サマリの取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員、月の勤怠情報のサマリを返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>work_recordsオプションにtrueを指定することで、明細となる日次の勤怠情報もあわせて返却します。</li>
     *     </ul>
     */
    get: operations['get_employee_work_record_summary']
    /**
     * 勤怠情報月次サマリの更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員、月の勤怠情報のサマリを更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>日毎の勤怠の更新はこのAPIではできません。日毎の勤怠の操作には勤怠APIを使用して下さい。</li>
     *       <li>勤怠データが存在しない場合は新規作成、既に存在する場合は上書き更新されます。</li>
     *       <li>値が設定された項目のみ更新されます。値が設定されなかった場合は自動的に0が設定されます。</li>
     *     </ul>
     */
    put: operations['update_employee_work_record_summary']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/time_clocks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 打刻一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・期間の打刻情報を返します。</p>
     */
    get: operations['get_employee_time_clocks']
    put?: never
    /**
     * 打刻の登録
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の打刻情報を登録します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>休憩開始の連続や退勤のみなど、整合性の取れていない打刻は登録できません。
     *     打刻可能種別の取得APIを呼ぶことで、その従業員がその時点で登録可能な打刻種別が取得できます。</li>
     *
     *       <li>出勤の打刻は</li>
     *       <ul>
     *         <li>前日の出勤時刻から24時間以内の場合、前日の退勤打刻が必須です。</li>
     *         <li> 前日の出勤時刻から24時間経過している場合は、前日の退勤打刻がなくとも出勤打刻を登録することができます。</li>
     *       </ul>
     *
     *       <li>退勤の打刻は</li>
     *       <ul>
     *         <li><a href=\"https://support.freee.co.jp/hc/ja/articles/900004490226-%E5%8B%A4%E6%80%A0%E5%9F%BA%E6%9C%AC%E8%A8%AD%E5%AE%9A%E3%82%92%E8%A1%8C%E3%81%86#h_01EYPYTR9HZ7YB8V5F18VMD1BT"target=\"_blank\">『退勤を自動打刻する』</a>の設定を使用している場合は、出勤打刻から24時間経過しても退勤打刻がない場合に、退勤打刻が自動で登録されます。</li>
     *         <li>すでに登録されている退勤打刻よりも後の時刻であれば上書き登録することができます。</li>
     *       </ul>
     *
     *       <li>打刻が日をまたぐ場合は、base_date(打刻日)に前日の日付を指定してください。</li>
     *
     *       <li>datetime(打刻日時)を指定できるのは管理者か事務担当者の権限を持ったユーザーのみです。</li>
     *     </ul>
     */
    post: operations['create_employee_time_clock']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/time_clocks/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 打刻の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・指定した打刻の詳細情報を返します。</p>
     */
    get: operations['get_employee_time_clock']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/time_clocks/available_types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 打刻可能種別の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の打刻可能種別と打刻基準日を返します。</p>
     *     <p>例: すでに出勤した状態だと、休憩開始、退勤が配列で返ります。</p>
     */
    get: operations['get_employee_time_clocks_available_types']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/special_holidays': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 従業員の特別休暇一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員に付与された特別休暇情報をリストで返します。</p>
     */
    get: operations['get_employees_special_holidays']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/attendance_tag_summaries/{year}/{month}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤怠タグ月次サマリの取得
     * @description <h2 id="">概要</h2>
     *     <p>
     *       指定した従業員・年月の勤怠タグサマリを更新します。<br />
     *       年月は給与支払い月を指定してください。
     *     </p>
     */
    get: operations['get_employees_attendance_tag_summaries']
    /**
     * 勤怠タグ月次サマリの更新
     * @description <h2 id="">概要</h2>
     *     <p>
     *       指定した従業員・年月の勤怠タグサマリを更新します。<br />
     *       年月は給与支払い月を指定してください。
     *     </p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>指定した従業員・年月の勤怠タグサマリが存在する場合は、上書き更新されます。</li>
     *       <li>指定がなかった勤怠タグは自動的に0が設定されます。</li>
     *     </ul>
     */
    put: operations['update_employees_attendance_tag_summaries']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/attendance_tags': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤怠タグ一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の利用可能な勤怠タグの一覧を返します。</p>
     */
    get: operations['get_employees_attendance_tags']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employees/{employee_id}/attendance_tags/{date}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤怠タグと利用回数の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の勤怠タグと利用回数の一覧を返します。</p>
     */
    get: operations['get_employees_attendance_tags_by_date']
    /**
     * 勤怠タグの更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の勤怠タグを更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>指定した従業員・日付の勤怠タグが存在する場合は、上書き更新されます。</li>
     *       <li>指定がなかった勤怠タグは削除されます。</li>
     *     </ul>
     */
    put: operations['update_employees_attendance_tags']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salaries/employee_payroll_statements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 給与明細一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所に所属する従業員の給与明細をリストで返します。</p>
     *     <p>指定した年月に支払いのある給与明細が返されます。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>複数時給を設定している場合はpaymentsに内訳が返されます。</li>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>給与計算中の場合は、各パラメータはnullおよび空配列が返ります。</li>
     *     </ul>
     */
    get: operations['get_salaries_employee_payroll_statements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/salaries/employee_payroll_statements/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 給与明細の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員ID、年月の給与明細を返します。</p>
     *     <p>指定した年月に支払いのある給与明細が返されます。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>複数時給を設定している場合はpaymentsに内訳が返されます。</li>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>給与計算中の場合は、各パラメータはnullおよび空配列が返ります。</li>
     *     </ul>
     *
     *     <h2 id="_2">examples</h2>
     *     <pre>
     *       <code>
     *       {
     *       "employee_payroll_statement": {
     *         "id": 1,
     *         "company_id": 1,
     *         "employee_id": 1,
     *         "employee_name": "給与 太郎",
     *         "employee_display_name": "給与 太郎",
     *         "employee_num": "001",
     *         "pay_date": "2018-02-25",
     *         "start_date": "2018-02-01",
     *         "closing_date": "2018-02-28",
     *         "variable_pay_start_date": "2018-01-01",
     *         "variable_pay_closing_date": "2018-01-31",
     *         "fixed": true,
     *         "calc_status": "calculated",
     *         "calculated_at": "2018-09-27T05:06:45.315Z",
     *         "pay_calc_type": "monthly",
     *         "board_member_remuneration_amount": "400000.0",
     *         "basic_pay_amount": "300000.0",
     *         "work_days": "21.0",
     *         "normal_work_time": "8.0",
     *         "normal_work_days": "21.0",
     *         "work_mins_by_paid_holiday": "480.0",
     *         "num_paid_holidays": "1.0",
     *         "is_board_member": true,
     *         "total_attendance_deduction_amount": "0.0",
     *         "total_allowance_amount": "0.0",
     *         "total_deduction_amount": "23830.0",
     *         "net_payment_amount": "277170.0",
     *         "gross_payment_amount": "301000.0",
     *         "total_worked_days_count": "21.0",
     *         "total_taxable_payment_amount": "301000.0",
     *         "total_expense_amount": "0.0",
     *         "total_transfer_amount": "277170.0",
     *         "total_annual_payment_amount": "600000.0",
     *         "payments": [{ "name": "基本給", "amount": "300000.0"},{ "name": "残業代", "amount": "1000.0"}],
     *         "deductions": [{"name": "所得税", "amount": "7000.0"}, {"name": "健康保険料", "amount": "16830.0"}],
     *         "attendances": [{"name": "遅刻・早退", "time": "0.0", "amount": "0.0"}],
     *         "overtime_pays": [{ "name": "時間外労働", "time": "60.0", "amount": "1000.0", "code": null }, { "name": "カスタム固定残業代", "time": null, "amount": "10000.0", "code": "a001" }],
     *         "remark": "備考"
     *         }
     *       }
     *       </code>
     *     </pre>
     */
    get: operations['get_salaries_employee_payroll_statement']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bonuses/employee_payroll_statements': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 賞与明細一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所に所属する従業員の賞与明細をリストで返します。</p>
     *     <p>指定した年月に支払いのある賞与明細が返されます。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    get: operations['get_bonuses_employee_payroll_statements']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/bonuses/employee_payroll_statements/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 賞与明細の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員ID、年月の賞与明細を返します。</p>
     *     <p>指定した年月に支払いのある賞与明細が返されます。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     *
     *     <h2 id="_2">examples</h2>
     *     <pre>
     *       <code>
     *         {
     *         "employee_payroll_statement": {
     *           "id": 1,
     *           "company_id": 1,
     *           "employee_id": 1,
     *           "employee_name": "給与 太郎",
     *           "employee_display_name": "給与 太郎",
     *           "employee_num": "001",
     *           "closing_date": "2018-03-31",
     *           "pay_date": "2018-03-31",
     *           "fixed": true,
     *           "calc_status": "calculated",
     *           "calculated_at": "2018-09-27T05:06:45.315Z",
     *           "bonus_amount": "300000.0",
     *           "total_allowance_amount": "0.0",
     *           "total_deduction_amount": "23830.0",
     *           "net_payment_amount": "268000.0",
     *           "gross_payment_amount": "330000.0",
     *           "total_taxable_payment_amount": "330000.0",
     *           "allowances": [{"name": "地域手当", "amount": "30000.0"}],
     *           "deductions": [{"name": "所得税", "amount": "46000.0"}, {"name": "健康保険料", "amount": "16000.0"}],
     *           "remark": "備考"
     *         }
     *         }
     *       </code>
     *     </pre>
     */
    get: operations['get_bonuses_employee_payroll_statement']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/employee_group_memberships': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 所属一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における所属情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    get: operations['get_employee_group_memberships']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 部門一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における部門情報をリストで返します。</p>
     *     <p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    get: operations['get_groups']
    put?: never
    /**
     * 部門の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の部門を新規作成します。</p>
     *     <p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    post: operations['create_group']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/groups/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 部門の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の部門の情報を更新します。</p>
     *     <p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    put: operations['update_group']
    post?: never
    /**
     * 部門の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の部門の情報を削除します。</p>
     *     <p>部門APIの使い方については、<a href="https://developer.freee.co.jp/tips/groups-api-hierarchy" target="_blank">部門APIを利用した組織図の取得について</a> をご参照ください。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    delete: operations['destroy_group']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/positions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 役職一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における役職情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    get: operations['get_positions']
    put?: never
    /**
     * 役職の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の役職を新規作成します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    post: operations['create_position']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/positions/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 役職の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の役職の情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *     </ul>
     */
    put: operations['update_position']
    post?: never
    /**
     * 役職の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の役職の情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>管理者権限を持ったユーザーのみ実行可能です。</li>
     *       <li>従業員に役職が適用されている場合、従業員の役職情報も削除されます。</li>
     *     </ul>
     */
    delete: operations['destroy_position']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/monthly_attendances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 月次勤怠締め申請一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における月次勤怠締め申請情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_monthly_attendances']
    put?: never
    /**
     * 月次勤怠締め申請の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の月次勤怠締め申請を新規作成します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['create_approval_requests_monthly_attendance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/monthly_attendances/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 月次勤怠締め申請の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の月次勤怠締め申請情報を取得します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_monthly_attendance']
    /**
     * 月次勤怠締め申請の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の月次勤怠締め申請情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    put: operations['update_approval_requests_monthly_attendance']
    post?: never
    /**
     * 月次勤怠締め申請の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の月次勤怠締め申請情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    delete: operations['destroy_approval_requests_monthly_attendance']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/monthly_attendances/{id}/actions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 月次勤怠締め申請の承認操作
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の月次勤怠締め申請情報を承認操作します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['action_approval_requests_monthly_attendance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/work_times': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤務時間修正申請一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における勤務時間修正申請情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_work_times']
    put?: never
    /**
     * 勤務時間修正申請の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の勤務時間修正を新規作成します。</p>
     *
     *     <h2 id="_2">examples</h2>
     *     <ul>
     *       <li>勤務時間を修正する場合は以下のようなパラメータを指定します。
     *         <pre>
     *           <code>
     *             {
     *               "company_id": 1,
     *               "target_date": "2017-05-25",
     *               "break_records": [
     *                 {
     *                   "clock_in_at": "2017-05-25 12:00:00",
     *                   "clock_out_at": "2017-05-25 13:00:00"
     *                 }
     *               ],
     *               "work_records": [
     *                 {
     *                   "clock_in_at": "2017-05-25 09:10:00",
     *                   "clock_out_at": "2017-05-25 18:20:00"
     *                 }
     *               ],
     *               "approval_flow_route_id": 1
     *             }
     *           </code>
     *         </pre>
     *       </li>
     *     </ul>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['create_approval_requests_work_time']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/work_times/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 勤務時間修正申請の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の勤務時間修正申請情報を取得します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_work_time']
    /**
     * 勤務時間修正申請の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の勤務時間修正申請情報を更新します。</p>
     *
     *     <h2 id="_2">examples</h2>
     *     <ul>
     *       <li>勤務時間を修正する場合は以下のようなパラメータを指定します。
     *         <pre>
     *           <code>
     *             {
     *               "company_id": 1,
     *               "target_date": "2017-05-25",
     *               "break_records": [
     *                 {
     *                   "clock_in_at": "2017-05-25 12:00:00",
     *                   "clock_out_at": "2017-05-25 13:00:00"
     *                 }
     *               ],
     *               "work_records": [
     *                 {
     *                   "clock_in_at": "2017-05-25 09:10:00",
     *                   "clock_out_at": "2017-05-25 18:20:00"
     *                 }
     *               ],
     *               "approval_flow_route_id": 1
     *             }
     *           </code>
     *         </pre>
     *       </li>
     *     </ul>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    put: operations['update_approval_requests_work_time']
    post?: never
    /**
     * 勤務時間修正申請の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の勤務時間修正申請情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    delete: operations['destroy_approval_requests_work_time']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/work_times/{id}/actions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 勤務時間修正申請の承認操作
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の勤務時間修正申請情報を承認操作します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['action_approval_requests_work_time']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/paid_holidays': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 有給申請一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における有給申請情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_paid_holidays']
    put?: never
    /**
     * 有給申請の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の有給申請を新規作成します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['create_approval_requests_paid_holiday']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/paid_holidays/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 有給申請の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の有給申請情報を取得します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_paid_holiday']
    /**
     * 有給申請の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の有給申請情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    put: operations['update_approval_requests_paid_holiday']
    post?: never
    /**
     * 有給申請の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の有給申請情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    delete: operations['destroy_approval_requests_paid_holiday']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/paid_holidays/{id}/actions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 有給申請の承認操作
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の有給申請情報を承認操作します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>全休の有給申請は承認されると申請者の有給の残数が減ります。</li>
     *       <li>半休と時間休の有給申請は承認されても申請者の有給の残数が減らない場合があります。以下の条件を満たす場合、申請者の有給の残数が減ります。</li>
     *       <ul>
     *         <li>申請承認後、申請者が申請の対象日に出勤打刻と退勤打刻をする。</li>
     *         <li>申請承認前に、申請者が申請の対象日に勤怠を登録している。</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['action_approval_requests_paid_holiday']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/special_holidays': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 特別休暇申請一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における特別休暇申請情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_special_holidays']
    put?: never
    /**
     * 特別休暇申請の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の特別休暇申請を新規作成します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['create_approval_requests_special_holiday']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/special_holidays/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 特別休暇申請の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の特別休暇申請情報を取得します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_special_holiday']
    /**
     * 特別休暇申請の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の特別休暇申請情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    put: operations['update_approval_requests_special_holiday']
    post?: never
    /**
     * 特別休暇申請の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の特別休暇申請情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    delete: operations['destroy_approval_requests_special_holiday']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/special_holidays/{id}/actions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 特別休暇申請の承認操作
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の特別休暇申請情報を承認操作します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>全休の特別休暇申請は承認されると申請者の特別休暇の残数が減ります。</li>
     *       <li>半休と時間休の特別休暇申請は承認されても申請者の特別休暇の残数が減らない場合があります。以下の条件を満たす場合、申請者の特別休暇の残数が減ります。</li>
     *       <ul>
     *         <li>申請承認後、申請者が申請の対象日に出勤打刻と退勤打刻をする。</li>
     *         <li>申請承認前に、申請者が申請の対象日に勤怠を登録している。</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['action_approval_requests_special_holiday']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/overtime_works': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 残業申請一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の指定日付時点における残業申請情報をリストで返します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_overtime_works']
    put?: never
    /**
     * 残業申請の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の残業申請を新規作成します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請の内容を勤怠に反映させるかの設定次第でリクエスト時に指定するパラメータが異なります。残業申請に必要な設定情報の取得APIで確認してください。</li>
     *       <ul>
     *         <li>勤怠に反映する設定の場合</li>
     *         <ul>
     *           <li>設定情報の取得APIで受け取った値を用いてパラメータを指定します。</li>
     *           <li>早出（early_work_start_at, early_work_end_at）か残業（overtime_work_start_at, overtime_work_end_at）のどちらか、もしくは両方を指定してください。</li>
     *           <ul>
     *             <li>早出・残業両方とも指定しなかった場合は取り消し申請となります。対象日の承認済み残業申請は全て取り消され、打刻データがあれば勤怠に反映し直します。</li>
     *           </ul>
     *           <li>早出の終了時刻（early_work_end_at）は所定の出勤時刻と同じ、残業の開始時刻（overtime_work_start_at）は所定の退勤時刻と同じ時刻を指定する必要があります。</li>
     *           <li>早出・残業の時刻に指定できる分の単位はそれぞれ設定（early_work_mins_unit, overtime_work_mins_unit）の通りです。</li>
     *         </ul>
     *         <li>勤怠に反映しない設定の場合</li>
     *         <ul>
     *           <li>残業開始（start_at）と残業終了（end_at）を指定してください。</li>
     *         </ul>
     *       </ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['create_approval_requests_overtime_work']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/overtime_works/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 残業申請の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の残業申請情報を取得します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_overtime_work']
    /**
     * 残業申請の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の残業申請情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請の内容を勤怠に反映させるかの設定次第でリクエスト時に指定するパラメータが異なります。残業申請に必要な設定情報の取得APIで確認してください。</li>
     *       <ul>
     *         <li>勤怠に反映する設定の場合</li>
     *         <ul>
     *           <li>設定情報の取得APIで受け取った値を用いてパラメータを指定します。</li>
     *           <li>早出（early_work_start_at, early_work_end_at）か残業（overtime_work_start_at, overtime_work_end_at）のどちらか、もしくは両方を指定してください。</li>
     *           <ul>
     *             <li>早出・残業両方とも指定しなかった場合は取り消し申請となります。対象日の承認済み残業申請は全て取り消され、打刻データがあれば勤怠に反映し直します。</li>
     *           </ul>
     *           <li>早出の終了時刻（early_work_end_at）は所定の出勤時刻と同じ、残業の開始時刻（overtime_work_start_at）は所定の退勤時刻と同じ時刻を指定する必要があります。</li>
     *           <li>早出・残業の時刻に指定できる分の単位はそれぞれ設定（early_work_mins_unit, overtime_work_mins_unit）の通りです。</li>
     *         </ul>
     *         <li>勤怠に反映しない設定の場合</li>
     *         <ul>
     *           <li>残業開始（start_at）と残業終了（end_at）を指定してください。</li>
     *         </ul>
     *       </ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    put: operations['update_approval_requests_overtime_work']
    post?: never
    /**
     * 残業申請の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の残業申請情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    delete: operations['destroy_approval_requests_overtime_work']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/overtime_works/{id}/actions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 残業申請の承認操作
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の残業申請情報を承認操作します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *       <li>申請者と承認者が同一ユーザーの場合、feedback(差戻し)をするとレスポンスは以下のようになります。</li>
     *       <ul>
     *         <li>status: draft</li>
     *         <li>approval_flow_logs.action: cancel</li>
     *       </ul>
     *     </ul>
     */
    post: operations['action_approval_requests_overtime_work']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_requests/overtime_works/setting': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 残業申請に必要な設定情報の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員・日付の残業申請に必要な設定情報を取得します。</p>
     *     <ul>
     *       <li>取得できる設定の一覧</li>
     *       <ul>
     *         <li>勤怠カレンダーに申請を反映するかどうかの設定</li>
     *         <ul>
     *           <li>この設定により、残業申請の作成や更新のリクエスト時に使用するパラメータが変わります。詳細は、残業申請の作成や更新の仕様を参照してください。</li>
     *         </ul>
     *         <li>所定の出退勤時間</li>
     *         <ul>
     *           <li>反映あり申請の場合、残業申請の作成や更新のリクエスト時に所定の出退勤時間が必要になります。詳細は、残業申請の作成や更新の仕様を参照してください。</li>
     *         </ul>
     *         <li>申請で指定できる分の単位</li>
     *         <ul>
     *           <li>反映あり申請の場合、勤務賃金設定の申請の単位設定によって、残業申請できる分単位が変わります。</li>
     *         </ul>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_requests_overtime_work_setting']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_flow_routes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 申請経路一覧の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の申請経路一覧を取得する。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>指定した事業所の従業員に紐づくユーザーのみ実行可能です。</li>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_flow_routes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/approval_flow_routes/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 申請経路の取得
     * @description <h2 id="">概要</h2>
     *     <p>指定した事業所の申請経路を取得する。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>指定した事業所の従業員に紐づくユーザーのみ実行可能です。</li>
     *       <li>申請経路、承認者の指定として部門役職データ連携を活用し、以下のいずれかを利用している申請と申請経路はAPI経由で参照は可能ですが、作成と更新、承認ステータスの変更ができません。</li>
     *       <ul>
     *         <li>役職指定（申請者の所属部門）</li>
     *         <li>役職指定（申請時に部門指定）</li>
     *         <li>部門および役職指定</li>
     *       </ul>
     *     </ul>
     */
    get: operations['get_approval_flow_route']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/employees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 年末調整対象一覧の取得
     * @description
     *     指定した年の年末調整対象のリスト返します。
     */
    get: operations['get_yearend_adjustment_employees']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/employees/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 年末調整の取得
     * @description 指定した年、従業員IDの年末調整の詳細内容を返します。<br>
     *     年末調整対象外の従業員は、本人情報、給与・賞与、前職情報のみが取得できます。
     */
    get: operations['get_yearend_adjustment_employee']
    /**
     * 年末調整従業員情報の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の姓名・住所などを更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_employee']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/payroll_and_bonus/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 年末調整従業員給与・賞与の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の給与・賞与を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_payroll_and_bonus']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/dependents/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 年末調整家族情報の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した年末調整の家族情報を更新します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *       <li>idがない場合は新規作成、destroyがtrueの場合は削除になります。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_dependents']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/previous_jobs/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 年末調整従業員前職情報の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の前職情報を更新します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_previous_job']
    post?: never
    /**
     * 年末調整従業員前職情報の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の前職情報を削除します。</p>
     *
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    delete: operations['destroy_yearend_adjustment_previous_job']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/insurances/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 年末調整従業員保険料情報の作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の保険料情報を作成します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    post: operations['post_yearend_adjustment_insurances']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/insurances/{employee_id}/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 年末調整従業員保険料情報の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の保険料情報を更新します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_insurances']
    post?: never
    /**
     * 年末調整従業員保険料情報の削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の保険料情報を削除します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    delete: operations['destroy_yearend_adjustment_insurances']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/housing_loan_deductions/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 年末調整従業員住宅ローン控除額の更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の住宅ローン控除額を更新します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_housing_loan_deduction']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/housing_loans/{employee_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 年末調整従業員住宅ローンの作成
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の住宅ローンを作成します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    post: operations['post_yearend_adjustment_housing_loan']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/v1/yearend_adjustments/{year}/housing_loans/{employee_id}/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * 年末調整従業員住宅ローンの更新
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の住宅ローンを更新します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    put: operations['put_yearend_adjustment_housing_loan']
    post?: never
    /**
     * 年末調整従業員住宅ローンの削除
     * @description <h2 id="">概要</h2>
     *     <p>指定した従業員の住宅ローンを削除します。</p>
     *     <h2 id="_1">注意点</h2>
     *     <ul>
     *       <li>本APIは、年末調整が確定済みの従業員には非対応です。</li>
     *     </ul>
     */
    delete: operations['destroy_yearend_adjustment_housing_loan']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    ApiV1EmployeeUpdateRequestSerializer: {
      /**
       * @description 従業員番号<br>
       *     従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）
       * @example A-001
       */
      num?: string
      /**
       * @description 従業員名（freee人事労務上での表示にのみ使用される名前です。出力書類には姓名が使用されます。）
       *     - 給与計算対象外の従業員情報の場合は必須になります。
       * @example 山田 太郎
       */
      display_name?: string
      /**
       * @description 基礎年金番号 数値文字列10桁固定長 例: 1111111111
       * @example 1111111111
       */
      base_pension_num?: string
      /**
       * @description 被保険者番号（雇用保険） 数値文字列11桁固定長 例: 11111111111
       *     - 給与計算対象外の従業員情報の場合に指定するとエラーになります。
       * @example 11111111111
       */
      employment_insurance_reference_number?: string
      /**
       * Format: date
       * @description 生年月日 null不可
       * @example 2000-01-01
       */
      birth_date: string
      /**
       * Format: date
       * @description 入社日 null不可
       * @example 2021-04-01
       */
      entry_date: string
      /**
       * Format: date
       * @description 退職日
       *     - 退職していない場合は指定不要です。
       *     - 指定する場合はentry_date以降の日付を指定してください。
       *     - retire_dateをクリアする場合、nullを指定してください。
       * @example 2022-03-31
       */
      retire_date?: string | null
      /**
       * @description <a href="https://support.freee.co.jp/hc/ja/articles/360000666303-締め日支払い日を変更する方法は-" target="_blank">締め日支払い日グループ名</a>
       *     で設定した締め日支払い日を指定してください。
       *     - 未指定の際は、締め日支払い日は変わりません。
       *     - 指定した従業員が給与計算対象外の場合、指定するとエラーになります。
       * @example 当月締め翌月払い
       */
      company_reference_date_rule_name?: string
    }
    ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer: {
      /** @description 項目名 */
      name?: string
      /** @description 時間 */
      time?: string
      /** @description 控除額 */
      amount?: string
    }
    ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer: {
      /** @description 項目名 */
      name?: string
      /** @description 金額 */
      amount?: string
    }
    ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer: {
      /**
       * @description 項目名
       * @example 時間外労働
       */
      name?: string
      /**
       * @description 時間(単位: 分)。固定残業代の場合、nullになります。
       * @example 60.0
       */
      time?: string | null
      /**
       * @description 手当金額
       * @example 1000.0
       */
      amount?: string
      /**
       * @description コード（事業所毎に設定可能な小文字英数最大10桁のコード）
       * @example 12345abcde
       */
      code?: string | null
    }
    ApiV1EmployeeCreateRequestSerializer: {
      /**
       * @description 従業員番号<br>
       *     従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）
       * @example A-001
       */
      num?: string
      /**
       * @description <a href="https://support.freee.co.jp/hc/ja/articles/360000562403-労働時間制度と勤務-賃金設定について" target="_blank">勤務・賃金設定名</a>
       *     で設定した名称を指定してください。
       *     - 未指定の際は、最初に登録したデータが利用されます。
       *     - 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。
       * @example 固定
       */
      working_hours_system_name?: string
      /**
       * @description <a href="https://support.freee.co.jp/hc/ja/articles/360000666303-締め日支払い日を変更する方法は-" target="_blank">締め日支払い日グループ名</a>
       *     で設定した締め日支払い日を指定してください。
       *     - 未指定の際は、最初に登録したデータが利用されます。
       *     - 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。
       * @example 15日締め（当月25日払い）
       */
      company_reference_date_rule_name?: string
      /**
       * @description 姓（必須）<br>
       *     last_nameとfirst_nameを空白文字で結合した文字列がdisplay_nameとして登録されます。
       *     - 例）last_name=田中、first_name＝太郎の場合、display_name＝田中 太郎
       *     - display_nameはput apiで更新可能です。
       * @example 山田
       */
      last_name: string
      /**
       * @description 名（必須）<br>
       *     last_nameとfirst_nameを空白文字で結合した文字列がdisplay_nameとして登録されます。
       *     - 例）last_name=田中、first_name＝太郎の場合、display_name＝田中 太郎
       *     - display_nameはput apiで更新可能です。
       * @example 太郎
       */
      first_name: string
      /**
       * @description 姓カナ（必須）
       * @example ヤマダ
       */
      last_name_kana: string
      /**
       * @description 名カナ（必須）
       * @example タロウ
       */
      first_name_kana: string
      /**
       * Format: date
       * @description 生年月日（必須）
       * @example 2000-01-01
       */
      birth_date: string
      /**
       * Format: date
       * @description 入社日（必須）
       * @example 2021-04-01
       */
      entry_date: string
      /**
       * @description 給与方式 monthly: 月給, daily: 日給, hourly: 時給
       *     - フレックスタイム制を使用している場合はmonthly以外指定できません。
       *     - 入力パラメータのno_payroll_calculationがfalseの場合は必須になります。
       *     - 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。
       * @example monthly
       * @enum {string}
       */
      pay_calc_type?: 'monthly' | 'daily' | 'hourly'
      /**
       * Format: int32
       * @description 基本給
       *     - 入力パラメータのno_payroll_calculationがfalseの場合は必須になります。
       *     - 入力パラメータのno_payroll_calculationがtrueの場合に指定するとエラーになります。
       * @example 220000
       */
      pay_amount?: number
      /**
       * @description 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
       * @example male
       * @enum {string}
       */
      gender?: 'unselected' | 'male' | 'female'
      /** @description 配偶者の有無（デフォルト: false） */
      married?: boolean
      /**
       * @description 給与計算対象外の従業員情報を作成する場合はtrueを指定します
       * @default false
       * @example true
       */
      no_payroll_calculation: boolean
    }
    ApiV1GroupMembershipSerializer: {
      /**
       * Format: date
       * @description 開始日
       * @example 2000-01-01
       */
      start_date?: string
      /**
       * Format: date
       * @description 終了日
       * @example 2020-01-01
       */
      end_date?: string
      /**
       * Format: int32
       * @description 部門ID
       * @example 10
       */
      group_id?: number
      /**
       * @description 部門コード
       * @example group2
       */
      group_code?: string
      /**
       * @description 部門名称
       * @example 営業部
       */
      group_name?: string
      /**
       * Format: int32
       * @description 部門階層レベル
       * @example 2
       */
      level?: number
      /**
       * Format: int32
       * @description 役職ID
       * @example 1
       */
      position_id?: number | null
      /**
       * @description 役職コード
       * @example position1
       */
      position_code?: string | null
      /**
       * @description 役職名称
       * @example 部長
       */
      position_name?: string | null
      /**
       * Format: int32
       * @description 親部門ID
       * @example 1
       */
      parent_group_id?: number | null
      /**
       * @description 親部門コード
       * @example group1
       */
      parent_group_code?: string | null
      /**
       * @description 親部門名称
       * @example 営業統括
       */
      parent_group_name?: string | null
    }
    ApiV1SalariesEmployeePayrollStatementSerializer: {
      /**
       * Format: int32
       * @description 給与明細ID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 従業員の姓名 */
      employee_name?: string
      /** @description 従業員の表示名 */
      employee_display_name?: string
      /** @description 従業員番号 */
      employee_num?: string | null
      /**
       * Format: date
       * @description 支払日
       */
      pay_date?: string
      /**
       * Format: date
       * @description 給与計算開始日（固定給）
       */
      start_date?: string
      /**
       * Format: date
       * @description 給与計算締日（固定給）
       */
      closing_date?: string
      /**
       * Format: date
       * @description 給与計算開始日（変動給） 残業手当、遅刻早退・欠勤などの計算に使われる期間
       */
      variable_pay_start_date?: string
      /**
       * Format: date
       * @description 給与計算締日（変動給）
       */
      variable_pay_closing_date?: string
      /** @description 給与明細が確定されているかどうか */
      fixed?: boolean
      /** @description 計算状況ステータス calculating: 計算中, calculated: 計算完了, overwritten: 直接編集, imported: インポート, error: エラー */
      calc_status?: string
      /**
       * Format: date-time
       * @description 計算状況ステータスの更新日
       */
      calculated_at?: string | null
      /**
       * @description 給与形態 monthly: 月給, daily: 日給, hourly: 時給, (空文字列): 計算中
       * @example monthly
       * @enum {string}
       */
      pay_calc_type?: 'monthly' | 'daily' | 'hourly' | ''
      /** @description 役員報酬 */
      board_member_remuneration_amount?: string | null
      /** @description 基本給 */
      basic_pay_amount?: string | null
      /** @description 労働日数 */
      work_days?: string | null
      /** @description 労働時間のうち、所定労働時間に該当するもの */
      normal_work_time?: string | null
      /** @description 所定労働出勤日数 */
      normal_work_days?: string | null
      /** @description 有給休暇時間数 */
      work_mins_by_paid_holiday?: string | null
      /** @description 有給日数 */
      num_paid_holidays?: string | null
      /** @description 役員かどうか */
      is_board_member?: boolean
      /** @description 勤怠控除額合計 */
      total_attendance_deduction_amount?: string | null
      /** @description 支給手当額合計 */
      total_allowance_amount?: string | null
      /** @description 控除額合計 */
      total_deduction_amount?: string | null
      /** @description 差引支給額(手取り額) */
      net_payment_amount?: string | null
      /** @description 総支給額(額面) */
      gross_payment_amount?: string | null
      /** @description 平日と休日の合計労働日数（日給用） */
      total_worked_days_count?: string | null
      /** @description 課税対象支給額 */
      total_taxable_payment_amount?: string | null
      /** @description 総経費精算額 */
      total_expense_amount?: string | null
      /** @description 総振込額 */
      total_transfer_amount?: string | null
      /** @description 課税支給累計額 */
      total_annual_payment_amount?: string | null
      /** @description 支給項目（基本給、残業代、通勤手当等） */
      payments?: components['schemas']['ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer'][]
      /** @description 控除項目（所得税、住民税、社会保険料等） */
      deductions?: components['schemas']['ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer'][]
      /** @description 勤怠控除項目（遅刻早退控除、欠勤控除等） */
      attendances?: components['schemas']['ApiV1EmployeePayrollStatementsEmployeeAttendanceItemSerializer'][]
      /** @description 時間外労働項目(法定内残業、時間外労働、休日労働、深夜労働等) */
      overtime_pays?:
        | components['schemas']['ApiV1EmployeePayrollStatementsEmployeeOvertimePayItemSerializer'][]
        | null
      /** @description 備考 */
      remark?: string | null
    }
    ApiV1HolidaysAndHoursSerializer: {
      /**
       * Format: float
       * @description 日数 0.5は半休を表す
       */
      days?: number
      /**
       * Format: int32
       * @description 時間数
       */
      hours?: number
    }
    ApiV1EmployeesIndexSerializer: {
      employees?: components['schemas']['ApiV1EmployeeSerializer'][]
      /**
       * Format: int32
       * @description 合計件数
       */
      total_count?: number
    }
    ApiV1GroupsIndexResponse: {
      groups: components['schemas']['ApiV1GroupResponseParams'][]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count: number
    }
    ApiV1GroupResponseParams: {
      /**
       * Format: int32
       * @description 部門ID
       * @example 3
       */
      id: number
      /**
       * @description 部門コード
       * @example group2
       */
      code?: string | null
      /**
       * @description 部門名称
       * @example 営業部門
       */
      name: string
      /**
       * Format: int32
       * @description 部門階層レベル（数字が大きいほど階層が深いです。）
       * @example 2
       */
      level: number
      /**
       * Format: int32
       * @description 親部門ID
       * @example 2
       */
      parent_group_id?: number | null
      /**
       * @description 親部門コード
       * @example group1
       */
      parent_group_code?: string | null
      /**
       * @description 親部門名称
       * @example 営業統括
       */
      parent_group_name?: string | null
    }
    ApiV1GroupCreateRequestParams: {
      /**
       * @description 部門コード（入力しない場合、空文字が入力されます。）
       * @example group2
       */
      code?: string | null
      /**
       * @description 部門名称（必須）
       * @example 営業部門
       */
      name: string
      /**
       * Format: int32
       * @description 親部門ID（部門階層レベルが10以内になるように親部門IDを指定してください。）
       * @example 2
       */
      parent_group_id?: number | null
    }
    ApiV1GroupUpdateRequestParams: {
      /**
       * @description 部門コード（入力しない場合、空文字が入力されます。）
       * @example group2
       */
      code?: string | null
      /**
       * @description 部門名称
       * @example 営業部門
       */
      name: string
    }
    ApiV1PositionIndexResponse: {
      positions: components['schemas']['ApiV1PositionResponseParams'][]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count: number
    }
    ApiV1PositionResponseParams: {
      /**
       * Format: int32
       * @description 役職ID
       * @example 1
       */
      id: number
      /**
       * @description 役職コード
       * @example position1
       */
      code?: string | null
      /**
       * @description 役職名称
       * @example 部長
       */
      name: string
    }
    ApiV1PositionRequestParams: {
      /**
       * @description 役職コード（入力しない場合、空文字が入力されます。）
       * @example position1
       */
      code?: string | null
      /**
       * @description 役職名称（必須）
       * @example 部長
       */
      name: string
    }
    ApiV1EmployeeGroupMembershipSerializer: {
      /**
       * Format: int32
       * @description 従業員ID
       * @example 1
       */
      id?: number
      /**
       * @description 従業員番号
       * @example A-001
       */
      num?: string | null
      /**
       * @description 従業員名（表示名）
       * @example 山田 太郎
       */
      display_name?: string
      /**
       * Format: date
       * @description 入社日
       * @example 2021-04-01
       */
      entry_date?: string
      /**
       * Format: date
       * @description 退職日
       * @example 2022-03-31
       */
      retire_date?: string | null
      /**
       * Format: int32
       * @description ユーザーID(従業員詳細未設定の場合、nullになります。)
       * @example 1
       */
      user_id?: number | null
      /**
       * @description ログイン用メールアドレス(従業員詳細未設定の場合、nullになります。)
       * @example example@example.com
       */
      login_email?: string | null
      /**
       * Format: date
       * @description 生年月日
       * @example 2000-01-01
       */
      birth_date?: string
      /**
       * @description 性別　unselected: 未選択, male: 男性, female: 女性
       * @example male
       * @enum {string}
       */
      gender?: 'unselected' | 'male' | 'female'
      /**
       * @description 給与計算対象従業員の場合trueを返します
       * @example true
       */
      payroll_calculation?: boolean
      group_memberships?: components['schemas']['ApiV1GroupMembershipSerializer'][]
    }
    ApiV1MonthlyAttendanceIndexResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列<br>
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       * @example 2022-02-01
       */
      target_date: string
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
    }
    ApiV1MonthlyAttendanceResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列<br>
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       * @example 2022-02-01
       */
      target_date: string
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
      /**
       * @description 申請経路ID
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * @description 申請経路名
       * @example 申請経路
       */
      approval_flow_route_name: string
      /** @description 承認履歴 */
      approval_flow_logs: components['schemas']['ApiV1ApprovalFlowLogsParams'][]
      /**
       * Format: int32
       * @description 現在承認ステップID<br>
       *     申請を差戻した場合、nullになります。
       * @example 1
       */
      current_step_id?: number | null
      /**
       * Format: int32
       * @description 現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
       * @example 1
       */
      current_round: number
    }
    ApiV1PaidHolidayIndexResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列<br>
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       */
      target_date: string
      /**
       * @description 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）
       * @example half
       * @enum {string}
       */
      holiday_type: 'full' | 'half' | 'morning' | 'afternoon' | 'hour'
      /**
       * @description 取得予定開始時間
       * @example 12:00
       */
      start_at?: string | null
      /**
       * @description 取得予定終了時間
       * @example 23:59
       */
      end_at?: string | null
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string | null
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）
       * @example revoking
       * @enum {string|null}
       */
      revoke_status: 'revoking' | 'revoked' | null
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
    }
    ApiV1PaidHolidayResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列<br>
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       */
      target_date: string
      /**
       * @description 取得単位。（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）
       * @example half
       * @enum {string}
       */
      holiday_type: 'full' | 'half' | 'morning' | 'afternoon' | 'hour'
      /**
       * @description 取得予定開始時間
       * @example 12:00
       */
      start_at?: string | null
      /**
       * @description 取得予定終了時間
       * @example 23:59
       */
      end_at?: string | null
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string | null
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）
       * @example revoking
       * @enum {string|null}
       */
      revoke_status: 'revoking' | 'revoked' | null
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
      /**
       * @description 申請経路ID
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * @description 申請経路名
       * @example 申請経路
       */
      approval_flow_route_name: string
      /** @description 承認履歴 */
      approval_flow_logs: components['schemas']['ApiV1ApprovalFlowLogsParams'][]
      /**
       * Format: int32
       * @description 現在承認ステップID<br>
       *     申請を差戻した場合、nullになります。
       * @example 1
       */
      current_step_id?: number | null
      /**
       * Format: int32
       * @description 現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
       * @example 1
       */
      current_round: number
    }
    ApiV1OvertimeWorkIndexResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列<br>
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       */
      target_date: string
      /**
       * @description 取得予定開始時間（必須）
       * @example 12:00
       */
      start_at?: string
      /**
       * @description 取得予定終了時間（必須）
       * @example 23:59
       */
      end_at?: string
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string | null
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）
       * @example revoking
       * @enum {string|null}
       */
      revoke_status: 'revoking' | 'revoked' | null
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
    }
    ApiV1OvertimeWorkResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列<br>
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       */
      target_date: string
      /**
       * @description 取得予定開始時間（必須）
       * @example 12:00
       */
      start_at?: string
      /**
       * @description 取得予定終了時間（必須）
       * @example 23:59
       */
      end_at?: string
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string | null
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）
       * @example revoking
       * @enum {string|null}
       */
      revoke_status: 'revoking' | 'revoked' | null
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
      /**
       * @description 申請経路ID
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * @description 申請経路名
       * @example 申請経路
       */
      approval_flow_route_name: string
      /** @description 承認履歴 */
      approval_flow_logs: components['schemas']['ApiV1ApprovalFlowLogsParams'][]
      /**
       * Format: int32
       * @description 現在承認ステップID<br>
       *     申請を差戻した場合、nullになります。
       * @example 1
       */
      current_step_id?: number | null
      /**
       * Format: int32
       * @description 現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
       * @example 1
       */
      current_round: number
    }
    ApiV1ApprovalFlowLogsParams: {
      /**
       * Format: int32
       * @description 申請操作をしたユーザーのユーザーID
       * @example 1
       */
      user_id?: number
      /**
       * @description 申請操作。（apply:申請する、approve:承認、cancel:取り消し、feedback:差戻し）
       * @example approve
       * @enum {string}
       */
      action?: 'apply' | 'approve' | 'cancel' | 'feedback'
      /**
       * Format: date-time
       * @description 申請操作をした日付時間
       * @example 2022-06-08T09:46:46.000+09:00
       */
      update_at?: string
    }
    ApiV1EmployeeSerializer: {
      /**
       * Format: int32
       * @description 従業員ID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /** @description 従業員番号 */
      num?: string | null
      /** @description 従業員名（表示名） */
      display_name?: string
      /** @description 基礎年金番号 */
      base_pension_num?: string | null
      /** @description 被保険者番号（雇用保険） */
      employment_insurance_reference_number?: string
      /**
       * Format: date
       * @description 生年月日
       */
      birth_date?: string
      /**
       * Format: date
       * @description 入社日
       */
      entry_date?: string
      /**
       * Format: date
       * @description 退職日
       */
      retire_date?: string | null
      /**
       * Format: int32
       * @description ユーザーID(従業員詳細未設定の場合、nullになります。)
       */
      user_id?: number | null
      profile_rule?: components['schemas']['ApiV1EmployeesProfileRuleSerializer']
      health_insurance_rule?: components['schemas']['ApiV1EmployeesHealthInsuranceRuleSerializer']
      welfare_pension_insurance_rule?: components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRuleSerializer']
      /** @description 家族情報 */
      dependent_rules?: components['schemas']['ApiV1EmployeesDependentRuleSerializer'][]
      bank_account_rule?: components['schemas']['ApiV1EmployeesBankAccountRuleSerializer']
      basic_pay_rule?: components['schemas']['ApiV1EmployeesBasicPayRuleSerializer']
      /**
       * @description 給与計算対象従業員の場合trueを返します
       * @example true
       */
      payroll_calculation?: boolean
      /**
       * @description 締め日支払日グループ名(給与計算対象外従業員の場合、nullを返します)
       * @example 当月締め翌月払い
       */
      company_reference_date_rule_name?: string | null
    }
    ApiV1UsersCompanySerializer: {
      /**
       * Format: int32
       * @description 事業所ID
       */
      id?: number
      /** @description 事業所名 */
      name?: string
      /**
       * @description 事業所におけるロール。
       *     - `company_admin`: 管理者
       *     - `self_only`: 一般または勤怠部門管理者
       *     - `clerk`: 事務担当者
       *
       *     [各権限でできることは各アカウントの権限についてのヘルプページを参照してください。](https://support.freee.co.jp/hc/ja/articles/204087410-%E6%93%8D%E4%BD%9C%E6%A8%A9%E9%99%90%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B#3)
       * @enum {string}
       */
      role?: 'company_admin' | 'self_only' | 'clerk'
      /** @description 事業所番号(半角数字10桁) */
      external_cid?: string
      /**
       * Format: int32
       * @description 事業所に所属する従業員としての従業員ID、従業員情報が未登録の場合はnullになります。
       */
      employee_id?: number | null
      /** @description 事業所に所属する従業員の表示名 */
      display_name?: string | null
    }
    ApiV1UsersMeSerializer: {
      /**
       * Format: int32
       * @description ユーザーID
       */
      id?: number
      /** @description ユーザーが属する事業所の一覧 */
      companies?: components['schemas']['ApiV1UsersCompanySerializer'][]
    }
    ApiV1EmployeeGroupMembershipsIndexSerializer: {
      employee_group_memberships?: components['schemas']['ApiV1EmployeeGroupMembershipSerializer'][]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count?: number
    }
    ApiV1BonusesEmployeePayrollStatementsIndexSerializer: {
      employee_payroll_statements?: components['schemas']['ApiV1BonusesEmployeePayrollStatementSerializer'][]
      /**
       * Format: int32
       * @description 合計件数
       */
      total_count?: number
    }
    ApiV1BonusesEmployeePayrollStatementSerializer: {
      /**
       * Format: int32
       * @description 賞与明細ID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 従業員の姓名 */
      employee_name?: string
      /** @description 従業員の表示名 */
      employee_display_name?: string
      /** @description 従業員番号 */
      employee_num?: string | null
      /**
       * Format: date
       * @description 確定日
       */
      closing_date?: string
      /**
       * Format: date
       * @description 支払日
       */
      pay_date?: string
      /** @description 賞与明細が確定されているかどうか */
      fixed?: boolean
      /** @description 計算状況ステータス calculating: 計算中, calculated: 計算完了, error: エラー */
      calc_status?: string
      /**
       * Format: date-time
       * @description 計算状況ステータスの更新日
       */
      calculated_at?: string | null
      /** @description 賞与額 */
      bonus_amount?: string | null
      /** @description 手当額合計 */
      total_allowance_amount?: string | null
      /** @description 控除額合計 */
      total_deduction_amount?: string | null
      /** @description 差引支給額(手取り額) */
      net_payment_amount?: string | null
      /** @description 総支給額(額面) */
      gross_payment_amount?: string | null
      /** @description 課税対象支給額 */
      total_taxable_payment_amount?: string | null
      /** @description 手当 */
      allowances?: components['schemas']['ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer'][]
      /** @description 控除項目（所得税、社会保険料等） */
      deductions?: components['schemas']['ApiV1EmployeePayrollStatementsEmployeePayrollStatementItemSerializer'][]
      /** @description 備考 */
      remark?: string
    }
    ApiV1CompaniesEmployeeSerializer: {
      /**
       * Format: int32
       * @description 従業員ID
       */
      id?: number
      /** @description 従業員番号(従業員詳細未設定の場合、nullになります。) */
      num?: string | null
      /** @description 従業員名（表示名） */
      display_name?: string
      /**
       * Format: date
       * @description 入社日
       */
      entry_date?: string
      /**
       * Format: date
       * @description 退職日
       */
      retire_date?: string | null
      /**
       * Format: int32
       * @description ユーザーID(従業員詳細未設定の場合、nullになります。)
       */
      user_id?: number | null
      /** @description ログイン用メールアドレス(従業員詳細未設定の場合、nullになります。) */
      email?: string | null
      /**
       * @description 給与計算対象従業員の場合trueを返します
       * @example true
       */
      payroll_calculation?: boolean
      /**
       * @description 締め日(給与計算対象外従業員の場合、nullを返します)
       * @example 31
       */
      closing_day?: number | null
      /**
       * @description 支払日(給与計算対象外従業員の場合、nullを返します)
       * @example 15
       */
      pay_day?: number | null
      /**
       * @description 翌月払いか、当月払いか(給与計算対象外従業員の場合、nullを返します)
       * @example next_month
       */
      month_of_pay_day?: string | null
    }
    ApiV1EmployeesProfileRuleUpdateRequestSerializer: {
      /**
       * @description 姓 null不可
       * @example 山田
       */
      last_name: string
      /**
       * @description 名 null不可
       * @example 太郎
       */
      first_name: string
      /**
       * @description 姓カナ
       * @example ヤマダ
       */
      last_name_kana: string
      /**
       * @description 名カナ
       * @example タロウ
       */
      first_name_kana: string
      /**
       * @description 住民票住所の郵便番号1
       * @example 000
       */
      zipcode1?: string
      /**
       * @description 住民票住所の郵便番号2
       * @example 0000
       */
      zipcode2?: string
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 4
       */
      prefecture_code?: number
      /** @description 住民票住所の市区町村以降の住所 */
      address?: string
      /** @description 住民票住所の市区町村以降の住所カナ */
      address_kana?: string
      /**
       * @description 電話番号1（先頭番号、例:03-1111-222x の03部分）
       * @example 000
       */
      phone1?: string
      /**
       * @description 電話番号2（中間番号、例:03-1111-222x の1111部分）
       * @example 0000
       */
      phone2?: string
      /**
       * @description 電話番号3（末尾番号、例:03-1111-222x の222x部分）
       * @example 0000
       */
      phone3?: string
      /**
       * @description 現住所の郵便番号１
       * @example 000
       */
      residential_zipcode1?: string
      /**
       * @description 現住所の郵便番号２
       * @example 0000
       */
      residential_zipcode2?: string
      /**
       * @description 現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 4
       */
      residential_prefecture_code?: number
      /** @description 現住所の住所 */
      residential_address?: string
      /** @description 現住所の住所カナ */
      residential_address_kana?: string
      /**
       * @description 雇用形態 board-member: 役員, (空文字列): 役員以外
       * @enum {string}
       */
      employment_type?: 'board-member' | ''
      /** @description 肩書 */
      title?: string
      /**
       * @description 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
       * @example male
       * @enum {string}
       */
      gender?: 'unselected' | 'male' | 'female'
      /** @description null不可 配偶者の有無 */
      married?: boolean
      /** @description null不可 勤労学生かどうか */
      is_working_student?: boolean
      /**
       * @description 寡夫／寡婦かどうか null不可 na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親
       * @enum {string}
       */
      widow_type?: 'na' | 'widower' | 'widow' | 'special_widow' | 'one_parent'
      /**
       * @description 障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者
       * @enum {string}
       */
      disability_type?: 'na' | 'general' | 'heavy'
      /**
       * @description メールアドレス
       * @example test@example.com
       */
      email?: string | null
      /**
       * @description 世帯主の名前<br>世帯主の続柄に myself:本人 を指定している場合は、世帯主の名前は自動で従業員名で更新するため指定できません。
       * @example 山田 吾郎
       */
      householder_name?: string
      /**
       * @description 世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他
       * @example father
       * @enum {string}
       */
      householder?:
        | 'myself'
        | 'husband'
        | 'wife'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
    }
    ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer: {
      /** @description 時給名 */
      name?: string
      /**
       * Format: int32
       * @description 所定内労働時間（分）
       */
      total_normal_time_mins?: number
    }
    ApiV1EmployeesWorkRecordTimeRangeSerializer: {
      /**
       * Format: date-time
       * @description 開始時刻
       * @example 2018-07-31 08:00:00
       */
      clock_in_at: string
      /**
       * Format: date-time
       * @description 終了時刻
       * @example 2018-07-31 08:00:00
       */
      clock_out_at: string
    }
    ApiV1EmployeesWorkRecordTimeRangeResponseSerializer: {
      /**
       * Format: date-time
       * @description 開始時刻
       */
      clock_in_at?: string
      /**
       * Format: date-time
       * @description 終了時刻
       */
      clock_out_at?: string
    }
    ApiV1EmployeesWelfarePensionInsuranceRuleSerializer: {
      /** Format: int32 */
      id?: number
      /**
       * @description 賞与計算時の子ども・子育て拠出金の計算方法
       * @example manual
       * @enum {string}
       */
      child_allowance_contribution_bonus_calc_type?: 'auto' | 'manual'
      /**
       * @description 給与計算時の子ども・子育て拠出金の計算方法
       * @example manual
       * @enum {string}
       */
      child_allowance_contribution_salary_calc_type?: 'auto' | 'manual'
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 厚生年金保険に加入しているかどうか */
      entried?: boolean
      /**
       * Format: float
       * @description 賞与計算時の子ども・子育て拠出金の直接指定金額
       * @example 111.0001
       */
      manual_child_allowance_contribution_amount_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の子ども・子育て拠出金の直接指定金額
       * @example 222.0001
       */
      manual_child_allowance_contribution_amount_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の厚生年金保険料の直接指定金額（会社負担分）
       * @example 333.0001
       */
      manual_welfare_pension_insurance_amount_of_company_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の厚生年金保険料の直接指定金額（会社負担分）
       * @example 444.0001
       */
      manual_welfare_pension_insurance_amount_of_company_salary?: number | null
      /**
       * Format: int32
       * @description 賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）
       * @example 555
       */
      manual_welfare_pension_insurance_amount_of_employee_bonus?: number | null
      /**
       * Format: int32
       * @description 給与計算時の厚生年金保険料の直接指定金額（従業員負担分）
       * @example 666
       */
      manual_welfare_pension_insurance_amount_of_employee_salary?: number | null
      /** @description 厚生年金保険の被保険者整理番号 */
      reference_num?: string | null
      /**
       * Format: int32
       * @description 標準報酬月額
       */
      standard_monthly_remuneration?: number
      /**
       * @description 賞与計算時の厚生年金保険料の計算方法
       * @example manual
       * @enum {string}
       */
      welfare_pension_insurance_bonus_calc_type?: 'auto' | 'manual'
      /**
       * @description 給与計算時の厚生年金保険料の計算方法
       * @example manual
       * @enum {string}
       */
      welfare_pension_insurance_salary_calc_type?: 'auto' | 'manual'
    } | null
    ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer: {
      /** @description 健康保険に加入しているかどうか null不可 */
      entried?: boolean
      /**
       * @description 給与計算時の健康保険料の計算方法
       * @example manual
       * @enum {string}
       */
      health_insurance_salary_calc_type?: 'auto' | 'manual'
      /**
       * @description 賞与計算時の健康保険料の計算方法
       * @example manual
       * @enum {string}
       */
      health_insurance_bonus_calc_type?: 'auto' | 'manual'
      /**
       * Format: int32
       * @description 給与計算時の健康保険料の直接指定金額（従業員負担分）
       * @example 8888
       */
      manual_health_insurance_amount_of_employee_salary?: number | null
      /**
       * Format: int32
       * @description 賞与計算時の健康保険料の直接指定金額（従業員負担分）
       * @example 7777
       */
      manual_health_insurance_amount_of_employee_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の健康保険料の直接指定金額（会社負担分）
       * @example 6666.0001
       */
      manual_health_insurance_amount_of_company_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の健康保険料の直接指定金額（会社負担分）
       * @example 5555.0001
       */
      manual_health_insurance_amount_of_company_bonus?: number | null
      /**
       * @description 給与計算時の介護保険料の計算方法
       * @example manual
       * @enum {string}
       */
      care_insurance_salary_calc_type?: 'auto' | 'manual'
      /**
       * @description 賞与計算時の介護保険料の計算方法
       * @example manual
       * @enum {string}
       */
      care_insurance_bonus_calc_type?: 'auto' | 'manual'
      /**
       * Format: int32
       * @description 給与計算時の介護保険料の直接指定金額（従業員負担分）
       * @example 4444
       */
      manual_care_insurance_amount_of_employee_salary?: number | null
      /**
       * Format: int32
       * @description 賞与計算時の介護保険料の直接指定金額（従業員負担分）
       * @example 3333
       */
      manual_care_insurance_amount_of_employee_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の介護保険料の直接指定金額（会社負担分）
       * @example 2222.0001
       */
      manual_care_insurance_amount_of_company_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の介護保険料の直接指定金額（会社負担分）
       * @example 1111.0001
       */
      manual_care_insurance_amount_of_company_bonus?: number | null
      /**
       * @description 健康保険の被保険者整理番号
       * @example 0000000000
       */
      reference_num?: string
      /**
       * Format: int32
       * @description 標準報酬月額 null不可
       * @example 58000
       */
      standard_monthly_remuneration: number
    }
    ApiV1EmployeesProfileRuleSerializer: {
      /** Format: int32 */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 姓 */
      last_name?: string
      /** @description 名 */
      first_name?: string
      /** @description 姓カナ */
      last_name_kana?: string
      /** @description 名カナ */
      first_name_kana?: string
      /**
       * @description 住民票住所の郵便番号1
       * @example 000
       */
      zipcode1?: string | null
      /**
       * @description 住民票住所の郵便番号2
       * @example 0000
       */
      zipcode2?: string | null
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 4
       */
      prefecture_code?: number | null
      /** @description 住民票住所の市区町村以降の住所 */
      address?: string | null
      /** @description 住民票住所の市区町村以降の住所カナ */
      address_kana?: string
      /**
       * @description 電話番号1（先頭番号、例:03-1111-222x の03部分）
       * @example 000
       */
      phone1?: string | null
      /**
       * @description 電話番号2（中間番号、例:03-1111-222x の1111部分）
       * @example 0000
       */
      phone2?: string | null
      /**
       * @description 電話番号3（末尾番号、例:03-1111-222x の222x部分）
       * @example 0000
       */
      phone3?: string | null
      /**
       * @description 現住所の郵便番号１
       * @example 000
       */
      residential_zipcode1?: string | null
      /**
       * @description 現住所の郵便番号２
       * @example 0000
       */
      residential_zipcode2?: string | null
      /**
       * @description 現住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 4
       */
      residential_prefecture_code?: number | null
      /** @description 現住所の住所 */
      residential_address?: string | null
      /** @description 現住所の住所カナ */
      residential_address_kana?: string | null
      /** @description 雇用形態 board-member: 役員, (空文字列): 役員以外 */
      employment_type?: string | null
      /** @description 肩書 */
      title?: string | null
      /**
       * @description 性別　unselected: 未選択, male: 男性, female: 女性
       * @example male
       * @enum {string}
       */
      gender?: 'unselected' | 'male' | 'female'
      /** @description 配偶者の有無 */
      married?: boolean
      /** @description 勤労学生かどうか */
      is_working_student?: boolean
      /** @description 寡夫／寡婦かどうか na: 空白, widower: 寡夫, widow: 寡婦, special_widow: 特別寡婦, one_parent: ひとり親 */
      widow_type?: string
      /** @description 障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者 */
      disability_type?: string
      /**
       * @description メールアドレス
       * @example test@example.com
       */
      email?: string | null
      /**
       * @description 世帯主の名前 世帯主の続柄がmyselfの場合は空白
       * @example 山田 吾郎
       */
      householder_name?: string
      /**
       * @description 世帯主の続柄 myself:本人, husband:夫, wife:妻, father:父, mother:母, child:子供, senior_brother:兄, junior_brother:弟, senior_sister:姉, junior_sister:妹, grandchild:孫, grandfather:祖父, grandmother:祖母, father_in_law:義父, mother_in_law:義母, grandfather_in_law:義祖父, grandmother_in_law:義祖母, other:その他
       * @example father
       * @enum {string|null}
       */
      householder?:
        | 'myself'
        | 'husband'
        | 'wife'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
        | null
    } | null
    ApiV1EmployeesDependentRuleUpdateRequestSerializer: {
      /**
       * Format: int32
       * @description 家族情報ルールID（idがない場合は新規作成になる)
       * @example 1
       */
      id?: number
      /**
       * @description 姓 null不可
       * @example 山田
       */
      last_name: string
      /**
       * @description 名 null不可
       * @example 花子
       */
      first_name: string
      /**
       * @description 姓カナ
       * @example ヤマダ
       */
      last_name_kana?: string
      /**
       * @description 名カナ
       * @example ハナコ
       */
      first_name_kana?: string
      /**
       * @description 性別　unselected: 未選択, male: 男性, female: 女性（デフォルト: unselected: 未選択）
       * @example male
       * @enum {string}
       */
      gender: 'unselected' | 'male' | 'female'
      /**
       * @description 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
       * @enum {string}
       */
      relationship:
        | 'spouse'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
        | 'great_grandfather'
        | 'great_grandmother'
        | 'spouses_child'
      /**
       * Format: date
       * @description 生年月日 null不可
       * @example 1999-01-01
       */
      birth_date: string
      /**
       * @description 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
       * @enum {string}
       */
      residence_type: 'live_in' | 'resident' | 'non_resident'
      /**
       * @description 住民票住所の郵便番号1
       * @example 000
       */
      zipcode1?: string
      /**
       * @description 住民票住所の郵便番号2
       * @example 0000
       */
      zipcode2?: string
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 4
       */
      prefecture_code?: number
      /** @description 住民票住所の市区町村以降の住所 */
      address?: string
      /** @description 住民票住所の市区町村以降の住所カナ */
      address_kana?: string
      /**
       * @description 基礎年金番号
       * @example 1234567890
       */
      base_pension_num?: string
      /**
       * Format: int32
       * @description 年間所得 null不可
       */
      income: number
      /**
       * Format: int32
       * @description 年間収入 null不可
       */
      annual_revenue: number
      /**
       * @description 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
       * @enum {string}
       */
      disability_type: 'na' | 'general' | 'heavy'
      /** @description 職業 */
      occupation?: string
      /**
       * Format: int32
       * @description 一年間の送金額
       */
      annual_remittance_amount?: number
      /**
       * Format: string
       * @description 雇用保険受給の有無
       *     - unselected 未選択
       *     - receiving_employment_insurance 雇用保険受給有り
       *     - not_receiving_employment_insurance 雇用保険受給無し
       *     - pending_employment_insurance 申請中
       * @example receiving_employment_insurance
       * @enum {string|null}
       */
      employment_insurance_receive_status?:
        | 'unselected'
        | 'receiving_employment_insurance'
        | 'not_receiving_employment_insurance'
        | 'pending_employment_insurance'
        | null
      /**
       * Format: date
       * @description 雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。
       * @example 2021-04-01
       */
      employment_insurance_receives_from?: string | null
      /**
       * @description 電話番号の種別
       *     - unselected 未選択
       *     - home 自宅
       *     - office 勤務先
       *     - mobile 携帯
       *     - other その他
       * @enum {string|null}
       */
      phone_type?: 'unselected' | 'home' | 'office' | 'mobile' | 'other' | null
      /**
       * @description 電話番号1（先頭番号、例:03-1111-222x の03部分）
       * @example 000
       */
      phone1?: string | null
      /**
       * @description 電話番号2（中間番号、例:03-1111-222x の1111部分）
       * @example 0000
       */
      phone2?: string | null
      /**
       * @description 電話番号3（末尾番号、例:03-1111-222x の222x部分）
       * @example 0000
       */
      phone3?: string | null
      /**
       * @description 家族情報を削除するか
       * @example false
       */
      destroy?: boolean
      /**
       * @description 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
       * @enum {string}
       */
      social_insurance_and_tax_dependent:
        | 'social_insurance_and_tax'
        | 'tax_only'
        | 'social_insurance_only'
        | 'not_dependent'
      /**
       * Format: date
       * @description 社会保険の扶養加入日
       */
      social_insurance_dependent_acquisition_date?: string | null
      /**
       * @description 社会保険の扶養加入理由 配偶者の場合 "": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 "": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他
       * @enum {string}
       */
      social_insurance_dependent_acquisition_reason?:
        | ''
        | 'start_working'
        | 'marriage'
        | 'turnover'
        | 'decrease_in_income'
        | 'other'
        | 'birth'
        | 'live_in'
      /** @description 社会保険のその他の扶養加入理由 */
      social_insurance_other_dependent_acquisition_reason?: string | null
      /**
       * Format: date
       * @description 社会保険の扶養喪失日
       */
      social_insurance_dependent_disqualification_date?: string | null
      /**
       * @description 社会保険の扶養喪失理由 配偶者の場合 "": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 "": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他
       * @enum {string}
       */
      social_insurance_dependent_disqualification_reason?:
        | ''
        | 'death'
        | 'divorce'
        | 'start_working_or_increase_in_income'
        | 'reach_75_years_old'
        | 'disability'
        | 'other'
        | 'start_working'
        | 'increase_in_income'
      /** @description 社会保険のその他の扶養喪失理由 */
      social_insurance_other_dependent_disqualification_reason?: string | null
      /**
       * Format: date
       * @description 税扶養の加入日
       */
      tax_dependent_acquisition_date?: string | null
      /**
       * @description 税扶養の加入理由 配偶者の場合 "": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 "": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他
       * @enum {string}
       */
      tax_dependent_acquisition_reason?:
        | ''
        | 'start_working'
        | 'marriage'
        | 'turnover'
        | 'decrease_in_income'
        | 'other'
        | 'birth'
        | 'live_in'
      /** @description 税扶養のその他の加入理由 */
      tax_other_dependent_acquisition_reason?: string | null
      /**
       * Format: date
       * @description 税扶養の喪失日
       */
      tax_dependent_disqualification_date?: string | null
      /**
       * @description 税扶養の喪失理由 配偶者の場合 "": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 "": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他
       * @enum {string}
       */
      tax_dependent_disqualification_reason?:
        | ''
        | 'death'
        | 'divorce'
        | 'start_working_or_increase_in_income'
        | 'reach_75_years_old'
        | 'disability'
        | 'other'
        | 'start_working'
        | 'increase_in_income'
      /** @description 税扶養のその他の喪失理由 */
      tax_other_dependent_disqualification_reason?: string | null
      /**
       * Format: string
       * @description 非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払
       * @enum {string}
       */
      non_resident_dependents_reason?:
        | 'none'
        | 'over_16_to_under_30_or_over_70'
        | 'study_abroad'
        | 'handicapped'
        | 'over_38_man'
    }
    ApiV1EmployeesTimeClockSerializer: {
      /**
       * Format: int32
       * @description 打刻ID
       */
      id?: number
      /**
       * Format: date
       * @description 打刻日
       */
      date?: string
      /**
       * @description 打刻種別(clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤)
       * @enum {string}
       */
      type?: 'clock_in' | 'break_begin' | 'break_end' | 'clock_out'
      /**
       * Format: date-time
       * @description 打刻時刻
       */
      datetime?: string
      /**
       * Format: date-time
       * @description オリジナルの打刻時間
       */
      original_datetime?: string
      /** @description 打刻メモ */
      note?: string
    }
    ApiV1EmployeesWorkRecordSummarySerializer: {
      /**
       * Format: int32
       * @description 給与支払い年
       */
      year?: number
      /**
       * Format: int32
       * @description 給与支払い月
       */
      month?: number
      /**
       * Format: date
       * @description 集計開始日
       */
      start_date?: string
      /**
       * Format: date
       * @description 集計終了日
       */
      end_date?: string
      /**
       * Format: float
       * @description 労働日数
       */
      work_days?: number
      /**
       * Format: int32
       * @description 総勤務時間（分）
       */
      total_work_mins?: number
      /**
       * Format: int32
       * @description 所定内労働時間（分）
       */
      total_normal_work_mins?: number
      /**
       * Format: int32
       * @description 給与計算に用いられる法定内残業時間（分）
       */
      total_excess_statutory_work_mins?: number
      /**
       * Format: int32
       * @description 所定外法定外労働時間
       */
      total_overtime_except_normal_work_mins?: number
      /**
       * Format: int32
       * @description 所定内法定外労働時間（裁量労働制の場合はみなしベース）
       */
      total_overtime_within_normal_work_mins?: number
      /**
       * Format: int32
       * @description 法定休日労働時間（分）
       */
      total_holiday_work_mins?: number
      /**
       * Format: int32
       * @description 深夜労働allow(company)時間（分）
       */
      total_latenight_work_mins?: number
      /**
       * Format: float
       * @description 欠勤日数
       */
      num_absences?: number
      /**
       * Format: float
       * @description 有給取得日数
       */
      num_paid_holidays?: number
      num_paid_holidays_and_hours?: components['schemas']['ApiV1HolidaysAndHoursSerializer']
      /**
       * Format: float
       * @description 有給残日数
       */
      num_paid_holidays_left?: number
      num_paid_holidays_and_hours_left?: components['schemas']['ApiV1HolidaysAndHoursSerializer']
      /**
       * Format: float
       * @description 振替休日の使用日数
       */
      num_substitute_holidays_used?: number
      /**
       * Format: float
       * @description 代休の使用日数
       */
      num_compensatory_holidays_used?: number
      /**
       * Format: float
       * @description 特別休暇の使用日数
       */
      num_special_holidays_used?: number
      num_special_holidays_and_hours_used?: components['schemas']['ApiV1HolidaysAndHoursSerializer']
      /**
       * Format: int32
       * @description 遅刻早退時間（分）
       */
      total_lateness_and_early_leaving_mins?: number
      /** @description 複数時給の労働時間の内訳（複数時給を設定している従業員のみ） */
      multi_hourly_wages?: components['schemas']['ApiV1EmployeesEmployeeMultiHourlyWageWorkRecordSummarySerializer'][]
      /** @description 日々の勤怠情報 */
      work_records?: components['schemas']['ApiV1EmployeesWorkRecordSerializer'][]
      /**
       * Format: int32
       * @description 不足時間（分）
       */
      total_shortage_work_mins?: number | null
      /**
       * Format: int32
       * @description 支給対象の法定内残業時間（分）
       */
      total_deemed_paid_excess_statutory_work_mins?: number | null
      /**
       * Format: int32
       * @description 支給対象の時間外労働時間（分）
       */
      total_deemed_paid_overtime_except_normal_work_mins?: number | null
    }
    ApiV1EmployeesWorkRecordSerializer: {
      /** @description 休憩時間のリスト */
      break_records?: components['schemas']['ApiV1EmployeesWorkRecordTimeRangeResponseSerializer'][]
      /** @description 出退勤のリスト
       *       - 登録されている全ての出退勤時間のリストを返します。 */
      work_record_segments?: components['schemas']['ApiV1EmployeesWorkRecordTimeRangeResponseSerializer'][]
      /**
       * Format: date-time
       * @description 出勤時刻
       *       - 出勤時刻を返します。出退勤が複数登録されている場合は、最初の出退勤の出勤時間を返します。
       */
      clock_in_at?: string | null
      /**
       * Format: date-time
       * @description 退勤時刻
       *       - 退勤時刻を返します。出退勤が複数登録されている場合は、最後の出退勤の退勤時間を返します。
       */
      clock_out_at?: string | null
      /**
       * Format: date-time
       * @description 対象日付
       */
      date?: string
      /**
       * @description 勤務パターン
       *     - normal_day: 所定労働日
       *     - prescribed_holiday: 所定休日
       *     - legal_holiday: 法定休日
       * @enum {string}
       */
      day_pattern?: 'normal_day' | 'prescribed_holiday' | 'legal_holiday'
      /**
       * @description スケジュールパターン
       *     - substitute_holiday_work: 振替出勤
       *     - substitute_holiday: 振替休日
       *     - compensatory_holiday_work: 代休出勤
       *     - compensatory_holiday: 代休
       *     - special_holiday: 特別休暇
       * @enum {string}
       */
      schedule_pattern?:
        | ''
        | 'substitute_holiday_work'
        | 'substitute_holiday'
        | 'compensatory_holiday_work'
        | 'compensatory_holiday'
        | 'special_holiday'
      /**
       * Format: int32
       * @description 早退分の時間（分単位）
       */
      early_leaving_mins?: number
      /**
       * Format: int32
       * @description 有給休暇の半休を利用した時間（分単位）
       */
      half_paid_holiday_mins?: number
      /**
       * Format: int32
       * @description 特別休暇の半休を利用した時間（分単位）
       */
      half_special_holiday_mins?: number
      /**
       * Format: int32
       * @description 有給休暇の時間休を利用した時間（分単位）
       */
      hourly_paid_holiday_mins?: number
      /**
       * Format: int32
       * @description 特別休暇の時間休を利用した時間（分単位）
       */
      hourly_special_holiday_mins?: number
      /**
       * @description 欠勤かどうか
       * @example false
       */
      is_absence?: boolean
      /** @description 勤怠データが編集可能かどうか */
      is_editable?: boolean
      /**
       * Format: int32
       * @description 遅刻分の時間（分単位）
       */
      lateness_mins?: number
      /**
       * Format: date-time
       * @description 所定労働開始時刻
       */
      normal_work_clock_in_at?: string | null
      /**
       * Format: date-time
       * @description 所定労働終了時刻
       */
      normal_work_clock_out_at?: string | null
      /**
       * Format: int32
       * @description 所定労働時間
       */
      normal_work_mins?: number
      /** @description 勤怠メモ */
      note?: string
      /**
       * Format: float
       * @description この日に対する有給取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_paid_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_paid_holiday_minsを参照してください。
       */
      paid_holiday?: number
      /**
       * Format: float
       * @description この日に対する特別休暇取得日数。半休の場合は0.5が入ります。時間休の場合はhourly_special_holiday_minsを所定労働時間で割った値が入るため、実際の時間を確認するにはhourly_special_holiday_minsを参照してください。
       */
      special_holiday?: number
      /**
       * Format: int32
       * @description 特別休暇設定ID
       */
      special_holiday_setting_id?: number | null
      /** @description 欠勤・遅刻・早退を控除対象時間に算入するかどうか */
      use_attendance_deduction?: boolean
      /** @description デフォルトの勤務時間設定を使っているかどうか */
      use_default_work_pattern?: boolean
      /**
       * @description 代休の半休を利用したかどうか
       * @example false
       */
      use_half_compensatory_holiday?: boolean
      /**
       * Format: int32
       * @description 時間外労働時間（分）（Webの勤怠登録画面にて詳細項目の「勤務時間の長さを自動で計算しない」にチェックを入れた場合0が返却されます。時間外労働時間はtotal_overtime_except_normal_work_minsを参照してください。）
       */
      total_overtime_work_mins?: number
      /**
       * Format: int32
       * @description 休日労働時間（分）
       */
      total_holiday_work_mins?: number
      /**
       * Format: int32
       * @description 深夜労働時間（分）
       */
      total_latenight_work_mins?: number
      /**
       * @description 勤怠登録時に勤務時間の長さを自動で計算しないかどうか
       * @example false
       */
      not_auto_calc_work_time?: boolean
      /**
       * Format: int32
       * @description 法定内残業時間（分）
       */
      total_excess_statutory_work_mins?: number
      /**
       * Format: int32
       * @description 深夜の法定内残業時間（分）
       */
      total_latenight_excess_statutory_work_mins?: number
      /**
       * Format: int32
       * @description 所定外法定外労働時間（分）
       */
      total_overtime_except_normal_work_mins?: number
      /**
       * Format: int32
       * @description 深夜の所定外法定外労働時間（分）
       */
      total_latenight_overtime_except_normal_work_min?: number
    }
    ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer: {
      /** @description 厚生年金保険に加入しているかどうか null不可 */
      entried?: boolean
      /**
       * @description 給与計算時の厚生年金保険料の計算方法
       * @example manual
       * @enum {string}
       */
      welfare_pension_insurance_salary_calc_type?: 'auto' | 'manual'
      /**
       * @description 賞与計算時の厚生年金保険料の計算方法
       * @example manual
       * @enum {string}
       */
      welfare_pension_insurance_bonus_calc_type?: 'auto' | 'manual'
      /**
       * Format: int32
       * @description 給与計算時の厚生年金保険料の直接指定金額（従業員負担分）
       * @example 1111
       */
      manual_welfare_pension_insurance_amount_of_employee_salary?: number | null
      /**
       * Format: int32
       * @description 賞与計算時の厚生年金保険料の直接指定金額（従業員負担分）
       * @example 2222
       */
      manual_welfare_pension_insurance_amount_of_employee_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の厚生年金保険料の直接指定金額（会社負担分）
       * @example 3333.0001
       */
      manual_welfare_pension_insurance_amount_of_company_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の厚生年金保険料の直接指定金額（会社負担分）
       * @example 4444.0001
       */
      manual_welfare_pension_insurance_amount_of_company_bonus?: number | null
      /**
       * @description 給与計算時の子ども・子育て拠出金の計算方法
       * @example manual
       * @enum {string}
       */
      child_allowance_contribution_salary_calc_type?: 'auto' | 'manual'
      /**
       * @description 賞与計算時の子ども・子育て拠出金の計算方法
       * @example manual
       * @enum {string}
       */
      child_allowance_contribution_bonus_calc_type?: 'auto' | 'manual'
      /**
       * Format: float
       * @description 給与計算時の子ども・子育て拠出金の直接指定金額
       * @example 5555.0001
       */
      manual_child_allowance_contribution_amount_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の子ども・子育て拠出金の直接指定金額
       * @example 6666.0001
       */
      manual_child_allowance_contribution_amount_bonus?: number | null
      /**
       * @description 厚生年金保険の被保険者整理番号
       * @example 0000000000
       */
      reference_num?: string
      /**
       * Format: int32
       * @description 標準報酬月額 null不可
       * @example 88000
       */
      standard_monthly_remuneration: number
    }
    ApiV1EmployeesBankAccountRuleUpdateRequestSerializer: {
      /** @description 金融機関名 */
      bank_name?: string
      /** @description 金融機関名カナ 英字カナのみ */
      bank_name_kana?: string
      /**
       * @description 金融機関コード 数値文字列4桁
       * @example 0000
       */
      bank_code?: string
      /** @description 支店名 */
      branch_name?: string
      /** @description 支店名カナ　英字カナのみ */
      branch_name_kana?: string
      /**
       * @description 支店コード 数値文字列3桁
       * @example 000
       */
      branch_code?: string
      /**
       * @description 口座番号 数値文字列7桁
       * @example 0000000
       */
      account_number?: string
      /** @description 口座名義カナ　英字カナのみ */
      account_name?: string
      /**
       * @description 預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金
       * @enum {string}
       */
      account_type?: 'ordinary' | 'current' | 'saving'
    }
    ApiV1EmployeesBasicPayRuleUpdateRequestSerializer: {
      /**
       * @description 給与方式 null不可 monthly: 月給, daily: 日給, hourly: 時給
       * @example monthly
       * @enum {string}
       */
      pay_calc_type: 'monthly' | 'daily' | 'hourly'
      /**
       * Format: int32
       * @description 基本給 null不可
       * @example 220000
       */
      pay_amount: number
    }
    ApiV1EmployeesHealthInsuranceRuleSerializer: {
      /**
       * Format: int32
       * @description 健康保険ルールID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 健康保険に加入しているかどうか */
      entried?: boolean
      /**
       * @description 給与計算時の健康保険料の計算方法
       * @example manual
       * @enum {string}
       */
      health_insurance_salary_calc_type?: 'auto' | 'manual'
      /**
       * @description 賞与計算時の健康保険料の計算方法
       * @example manual
       * @enum {string}
       */
      health_insurance_bonus_calc_type?: 'auto' | 'manual'
      /**
       * Format: int32
       * @description 給与計算時の健康保険料の直接指定金額（従業員負担分）
       * @example 8888
       */
      manual_health_insurance_amount_of_employee_salary?: number | null
      /**
       * Format: int32
       * @description 賞与計算時の健康保険料の直接指定金額（従業員負担分）
       * @example 7777
       */
      manual_health_insurance_amount_of_employee_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の健康保険料の直接指定金額（会社負担分）
       * @example 6666.0001
       */
      manual_health_insurance_amount_of_company_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の健康保険料の直接指定金額（会社負担分）
       * @example 5555.0001
       */
      manual_health_insurance_amount_of_company_bonus?: number | null
      /**
       * @description 給与計算時の介護保険料の計算方法
       * @example manual
       * @enum {string}
       */
      care_insurance_salary_calc_type?: 'auto' | 'manual'
      /**
       * @description 賞与計算時の介護保険料の計算方法
       * @example manual
       * @enum {string}
       */
      care_insurance_bonus_calc_type?: 'auto' | 'manual'
      /**
       * Format: int32
       * @description 給与計算時の介護保険料の直接指定金額（従業員負担分）
       * @example 4444
       */
      manual_care_insurance_amount_of_employee_salary?: number | null
      /**
       * Format: int32
       * @description 賞与計算時の介護保険料の直接指定金額（従業員負担分）
       * @example 3333
       */
      manual_care_insurance_amount_of_employee_bonus?: number | null
      /**
       * Format: float
       * @description 給与計算時の介護保険料の直接指定金額（会社負担分）
       * @example 2222.0001
       */
      manual_care_insurance_amount_of_company_salary?: number | null
      /**
       * Format: float
       * @description 賞与計算時の介護保険料の直接指定金額（会社負担分）
       * @example 1111.0001
       */
      manual_care_insurance_amount_of_company_bonus?: number | null
      /** @description 健康保険の被保険者整理番号 */
      reference_num?: string | null
      /**
       * Format: int32
       * @description 標準報酬月額
       */
      standard_monthly_remuneration?: number
    } | null
    ApiV1EmployeesBankAccountRuleSerializer: {
      /**
       * Format: int32
       * @description 銀行口座ルールID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 金融機関名 */
      bank_name?: string | null
      /** @description 金融機関名カナ */
      bank_name_kana?: string | null
      /** @description 金融機関コード */
      bank_code?: string | null
      /** @description 支店名 */
      branch_name?: string | null
      /** @description 支店名カナ */
      branch_name_kana?: string | null
      /** @description 支店コード */
      branch_code?: string | null
      /** @description 口座番号 */
      account_number?: string | null
      /** @description 口座名義カナ */
      account_name?: string | null
      /** @description 預金種類 ordinary: 普通預金, current: 当座預金, saving: 貯蓄預金 */
      account_type?: string | null
    } | null
    ApiV1EmployeesDependentRuleSerializer: {
      /**
       * Format: int32
       * @description 家族情報ルールID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 姓 */
      last_name?: string
      /** @description 名 */
      first_name?: string
      /** @description 姓カナ */
      last_name_kana?: string | null
      /** @description 名カナ */
      first_name_kana?: string | null
      /**
       * @description 性別　unselected: 未選択, male: 男性, female: 女性
       * @enum {string}
       */
      gender?: 'unselected' | 'male' | 'female'
      /** @description 続柄 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子 */
      relationship?: string
      /**
       * Format: date
       * @description 生年月日
       */
      birth_date?: string
      /** @description 同居・別居 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外) */
      residence_type?: string
      /** @description 住民票住所の郵便番号1 */
      zipcode1?: string | null
      /** @description 住民票住所の郵便番号2 */
      zipcode2?: string | null
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 4
       */
      prefecture_code?: number | null
      /** @description 住民票住所の市区町村以降の住所 */
      address?: string | null
      /** @description 住民票住所の市区町村以降の住所カナ */
      address_kana?: string | null
      /** @description 基礎年金番号 */
      base_pension_num?: string | null
      /**
       * Format: int32
       * @description 年間所得
       */
      income?: number
      /**
       * Format: int32
       * @description 年間収入
       */
      annual_revenue?: number
      /** @description 障害に該当するか na: 障害なし, general: 一般の障害者, heavy: 特別障害者 */
      disability_type?: string
      /** @description 職業 */
      occupation?: string | null
      /**
       * Format: int32
       * @description 一年間の送金額
       */
      annual_remittance_amount?: number
      /**
       * Format: string
       * @description 雇用保険受給の有無
       *     - unselected 未選択
       *     - receiving_employment_insurance 雇用保険受給有り
       *     - not_receiving_employment_insurance 雇用保険受給無し
       *     - pending_employment_insurance 申請中
       * @enum {string|null}
       */
      employment_insurance_receive_status?:
        | 'unselected'
        | 'receiving_employment_insurance'
        | 'not_receiving_employment_insurance'
        | 'pending_employment_insurance'
        | null
      /**
       * Format: date
       * @description 雇用保険受給開始年月日 employment_insurance_receive_statusが未選択、無しの場合は指定できません。
       */
      employment_insurance_receives_from?: string | null
      /**
       * @description 電話番号の種別
       *     - unselected 未選択
       *     - home 自宅
       *     - office 勤務先
       *     - mobile 携帯
       *     - other その他
       * @enum {string|null}
       */
      phone_type?: 'unselected' | 'home' | 'office' | 'mobile' | 'other' | null
      /**
       * @description 電話番号1（先頭番号、例:03-1111-222x の03部分）
       * @example 000
       */
      phone1?: string | null
      /**
       * @description 電話番号2（中間番号、例:03-1111-222x の1111部分）
       * @example 0000
       */
      phone2?: string | null
      /**
       * @description 電話番号3（末尾番号、例:03-1111-222x の222x部分）
       * @example 0000
       */
      phone3?: string | null
      /** @description 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ */
      social_insurance_and_tax_dependent?: string
      /**
       * Format: date
       * @description 社会保険の扶養加入日
       */
      social_insurance_dependent_acquisition_date?: string | null
      /**
       * @description 社会保険の扶養加入理由 配偶者の場合 "": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 "": 未選択, birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他
       * @enum {string}
       */
      social_insurance_dependent_acquisition_reason?:
        | ''
        | 'start_working'
        | 'marriage'
        | 'turnover'
        | 'decrease_in_income'
        | 'other'
        | 'birth'
        | 'live_in'
      /** @description 社会保険のその他の扶養加入理由 */
      social_insurance_other_dependent_acquisition_reason?: string | null
      /**
       * Format: date
       * @description 社会保険の扶養喪失日
       */
      social_insurance_dependent_disqualification_date?: string | null
      /**
       * @description 社会保険の扶養喪失理由 配偶者の場合 "": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 "": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他
       * @enum {string}
       */
      social_insurance_dependent_disqualification_reason?:
        | ''
        | 'death'
        | 'divorce'
        | 'start_working_or_increase_in_income'
        | 'reach_75_years_old'
        | 'disability'
        | 'other'
        | 'start_working'
        | 'increase_in_income'
      /** @description 社会保険のその他の扶養喪失理由 */
      social_insurance_other_dependent_disqualification_reason?: string | null
      /**
       * Format: date
       * @description 税扶養の加入日
       */
      tax_dependent_acquisition_date?: string | null
      /**
       * @description 税扶養の加入理由 配偶者の場合 "": 未選択, start_working: 配偶者の就職, marriage: 婚姻, turnover: 離職, decrease_in_income: 収入減少, other: その他 配偶者以外の場合 "": birth: 出生, turnover: 離職, decrease_in_income: 収入減, live_in: 同居, other: その他
       * @enum {string}
       */
      tax_dependent_acquisition_reason?:
        | ''
        | 'start_working'
        | 'marriage'
        | 'turnover'
        | 'decrease_in_income'
        | 'other'
        | 'birth'
        | 'live_in'
      /** @description 税扶養のその他の加入理由 */
      tax_other_dependent_acquisition_reason?: string | null
      /**
       * Format: date
       * @description 税扶養の喪失日
       */
      tax_dependent_disqualification_date?: string | null
      /**
       * @description 税扶養の喪失理由 配偶者の場合 "": 未選択, death: 死亡, divorce: 離婚, start_working_or_increase_in_income: 就職・収入増加, reach_75_years_old: 歳到達, disability: 障害認定, other: その他 配偶者以外の場合 "": 未選択, death: 死亡, start_working: 就職, increase_in_income: 収入増加, reach_75_years_old: ７５歳到達, disability: 障害認定, other: その他
       * @enum {string}
       */
      tax_dependent_disqualification_reason?:
        | ''
        | 'death'
        | 'divorce'
        | 'start_working_or_increase_in_income'
        | 'reach_75_years_old'
        | 'disability'
        | 'other'
        | 'start_working'
        | 'increase_in_income'
      /** @description 税扶養のその他の喪失理由 */
      tax_other_dependent_disqualification_reason?: string | null
      /**
       * Format: string
       * @description 非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払
       * @enum {string}
       */
      non_resident_dependents_reason?:
        | 'none'
        | 'over_16_to_under_30_or_over_70'
        | 'study_abroad'
        | 'handicapped'
        | 'over_38_man'
    }
    ApiV1EmployeesBasicPayRuleSerializer: {
      /**
       * Format: int32
       * @description 従業員の基本給ID
       */
      id?: number
      /**
       * Format: int32
       * @description 事業所ID
       */
      company_id?: number
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /**
       * @description 給与方式 monthly: 月給, daily: 日給, hourly: 時給
       * @enum {string}
       */
      pay_calc_type?: 'monthly' | 'daily' | 'hourly'
      /**
       * Format: int32
       * @description 基本給
       */
      pay_amount?: number
    } | null
    ApiV1ProfileCustomFieldGroupSerializer: {
      /**
       * Format: int32
       * @description グループID
       * @example 1
       */
      id?: number
      /**
       * @description グループ名
       * @example 資格取得結果
       */
      name?: string
      /** @description カスタム項目 */
      profile_custom_field_rules?: components['schemas']['ApiV1EmployeeProfileCustomFieldSerializer'][]
    }
    ApiV1EmployeeProfileCustomFieldSerializer: {
      /**
       * Format: int32
       * @description カスタム項目ID
       * @example 1
       */
      id?: number
      /**
       * @description 項目タイプ file: ファイル, text: テキスト, number: 数値, date: 日付, selector: セレクター, time: 時間
       * @example file
       * @enum {string}
       */
      field_type?: 'file' | 'text' | 'number' | 'date' | 'selector' | 'time'
      /**
       * @description 項目名
       * @example 証明書ファイル
       */
      name?: string
      /**
       * @description 値（項目タイプがfileの場合、nullを返します）
       * @example null
       */
      value?: string | null
      /**
       * @description ファイル名（項目タイプがfile以外の場合、nullを返します）
       * @example 証明書ファイル.jpeg
       */
      file_name?: string | null
    }
    'ApiV1EmployeesProfileCustomFieldRulesController.index_response': {
      profile_custom_field_groups?: components['schemas']['ApiV1ProfileCustomFieldGroupSerializer'][]
    }
    'ApiV1EmployeesController.show_response': {
      employee?: components['schemas']['ApiV1EmployeeSerializer']
    }
    'ApiV1EmployeesController.create_response': {
      employee?: components['schemas']['ApiV1EmployeeSerializer']
    }
    'ApiV1EmployeesController.create_body': {
      /**
       * Format: int32
       * @description 作成対象事業所ID（必須）
       */
      company_id: number
      employee: components['schemas']['ApiV1EmployeeCreateRequestSerializer']
    }
    'ApiV1EmployeesController.update_response': {
      employee?: components['schemas']['ApiV1EmployeeSerializer']
    }
    'ApiV1EmployeesController.update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年
       *     - 給与計算対象の従業員情報の場合は必須になります。
       * @example 2021
       */
      year?: number
      /**
       * Format: int32
       * @description 更新対象月
       *     - 給与計算対象の従業員情報の場合は必須になります。
       *     - 締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。
       *     - 翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。
       * @example 1
       */
      month?: number
      employee: components['schemas']['ApiV1EmployeeUpdateRequestSerializer']
    }
    'ApiV1EmployeesProfileRulesController.show_response': {
      employee_profile_rule?: components['schemas']['ApiV1EmployeesProfileRuleSerializer']
    }
    'ApiV1EmployeesProfileRulesController.update_response': {
      employee_profile_rule?: components['schemas']['ApiV1EmployeesProfileRuleSerializer']
    }
    'ApiV1EmployeesProfileRulesController.update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年（必須）
       * @example 2021
       */
      year: number
      /**
       * Format: int32
       * @description 更新対象月（必須）<br>
       *     締日支払日設定が翌月払いの従業員情報の場合は、指定したmonth + 1の値が更新されます。<br>
       *     翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>
       * @example 1
       */
      month: number
      employee_profile_rule: components['schemas']['ApiV1EmployeesProfileRuleUpdateRequestSerializer']
    }
    'ApiV1EmployeesHealthInsuranceRulesController.show_response': {
      employee_health_insurance_rule?: components['schemas']['ApiV1EmployeesHealthInsuranceRuleSerializer']
    }
    'ApiV1EmployeesHealthInsuranceRulesController.update_response': {
      employee_health_insurance_rule?: components['schemas']['ApiV1EmployeesHealthInsuranceRuleSerializer']
    }
    'ApiV1EmployeesHealthInsuranceRulesController.update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年（必須）
       * @example 2021
       */
      year: number
      /**
       * Format: int32
       * @description 更新対象月（必須）<br>
       *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>
       *     翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>
       * @example 1
       */
      month: number
      employee_health_insurance_rule: components['schemas']['ApiV1EmployeesHealthInsuranceRuleUpdateRequestSerializer']
    }
    'ApiV1EmployeesWelfarePensionInsuranceRulesController.show_response': {
      employee_welfare_pension_insurance_rule?: components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRuleSerializer']
    }
    'ApiV1EmployeesWelfarePensionInsuranceRulesController.update_response': {
      employee_welfare_pension_insurance_rule?: components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRuleSerializer']
    }
    'ApiV1EmployeesWelfarePensionInsuranceRulesController.update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年（必須）
       * @example 2021
       */
      year: number
      /**
       * Format: int32
       * @description 更新対象月（必須）<br>
       *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>
       *     翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>
       * @example 1
       */
      month: number
      employee_welfare_pension_insurance_rule: components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRuleUpdateRequestSerializer']
    }
    'ApiV1EmployeesDependentRulesController.index_response': {
      employee_dependent_rules?: components['schemas']['ApiV1EmployeesDependentRuleSerializer'][]
    }
    'ApiV1EmployeesDependentRulesController.bulk_update_response': {
      /** @description 家族情報ルール */
      employee_dependent_rules?: components['schemas']['ApiV1EmployeesDependentRuleSerializer'][]
    }
    'ApiV1EmployeesDependentRulesController.bulk_update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年（必須）
       * @example 2021
       */
      year: number
      /**
       * Format: int32
       * @description 更新対象月（必須）<br>
       *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>
       *     翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>
       * @example 1
       */
      month: number
      /** @description 家族情報ルール */
      employee_dependent_rules: components['schemas']['ApiV1EmployeesDependentRuleUpdateRequestSerializer'][]
    }
    'ApiV1EmployeesBankAccountRulesController.show_response': {
      employee_bank_account_rule?: components['schemas']['ApiV1EmployeesBankAccountRuleSerializer']
    }
    'ApiV1EmployeesBankAccountRulesController.update_response': {
      employee_bank_account_rule?: components['schemas']['ApiV1EmployeesBankAccountRuleSerializer']
    }
    'ApiV1EmployeesBankAccountRulesController.update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年（必須）
       * @example 2021
       */
      year: number
      /**
       * Format: int32
       * @description 更新対象月（必須）<br>
       *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます。<br>
       *     翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>
       * @example 1
       */
      month: number
      employee_bank_account_rule: components['schemas']['ApiV1EmployeesBankAccountRuleUpdateRequestSerializer']
    }
    'ApiV1EmployeesBasicPayRulesController.show_response': {
      employee_basic_pay_rule?: components['schemas']['ApiV1EmployeesBasicPayRuleSerializer']
    }
    'ApiV1EmployeesBasicPayRulesController.update_response': {
      employee_basic_pay_rule?: components['schemas']['ApiV1EmployeesBasicPayRuleSerializer']
    }
    'ApiV1EmployeesBasicPayRulesController.update_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 更新対象年（必須）
       * @example 2021
       */
      year: number
      /**
       * Format: int32
       * @description 更新対象月（必須）<br>
       *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が更新されます<br>
       *     翌月払いの従業員の2022/01の従業員情報を更新する場合は、year=2021,month=12を指定してください。<br>
       * @example 1
       */
      month: number
      employee_basic_pay_rule: components['schemas']['ApiV1EmployeesBasicPayRuleUpdateRequestSerializer']
    }
    'ApiV1EmployeesWorkRecordsController.update_body': {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       */
      company_id: number
      /** @description 休憩時間のリスト */
      break_records?: components['schemas']['ApiV1EmployeesWorkRecordTimeRangeSerializer'][]
      /** @description 出退勤のリスト */
      work_record_segments?: components['schemas']['ApiV1EmployeesWorkRecordTimeRangeSerializer'][]
      /**
       * Format: date-time
       * @description 出勤時刻
       *
       *     複数の出退勤を指定できないため非推奨です。 `work_record_segments` を利用してください。
       * @example 2018-07-31 08:00:00
       */
      clock_in_at?: string
      /**
       * Format: date-time
       * @description 退勤時刻
       *
       *     複数の出退勤を指定できないため非推奨です。 `work_record_segments` を利用してください。
       * @example 2018-07-31 08:00:00
       */
      clock_out_at?: string
      /**
       * @description 勤務パターン（所定労働日: normal_day, 所定休日: prescribed_holiday, 法定休日: legal_holiday）
       *
       *     prescribed_holiday、legal_holidayを指定すると、以下のパラメータについて、指定した値が反映されず無視されます。
       *     - early_leaving_mins
       *     - lateness_mins
       *     - paid_holiday
       * @enum {string}
       */
      day_pattern?: 'normal_day' | 'prescribed_holiday' | 'legal_holiday'
      /**
       * Format: int32
       * @description 早退分の時間（分単位）
       */
      early_leaving_mins?: number
      /** @description 欠勤かどうか
       *
       *     is_absenceにtrueを指定すると、以下のパラーメータについて、指定した値が反映されず無視されます。
       *     - break_records
       *       - clock_in_at
       *       - clock_out_at
       *     - clock_in_at
       *     - clock_out_at
       *     - early_leaving_mins
       *     - lateness_mins
       *     - normal_work_clock_in_at
       *     - normal_work_clock_out_at
       *     - normal_work_mins
       *     - paid_holiday
       *     - half_paid_holiday_mins
       *     - hourly_paid_holiday_mins
       *     - special_holiday
       *     - special_holiday_setting_id
       *     - half_special_holiday_mins
       *     - hourly_special_holiday_mins */
      is_absence?: boolean
      /**
       * Format: int32
       * @description 遅刻分の時間（分単位）
       */
      lateness_mins?: number
      /**
       * Format: date-time
       * @description 所定労働開始時刻。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）
       * @example 2018-07-31 08:00:00
       */
      normal_work_clock_in_at?: string
      /**
       * Format: date-time
       * @description 所定労働終了時刻。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）
       * @example 2018-07-31 08:00:00
       */
      normal_work_clock_out_at?: string
      /**
       * Format: int32
       * @description 所定労働時間。指定しない場合はデフォルト設定が使用されます。（デフォルト設定は従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。）
       */
      normal_work_mins?: number
      /** @description 勤怠メモ */
      note?: string
      /**
       * Format: float
       * @description この日の有休取得日数。1日単位で指定します。
       * @example 1.0
       * @enum {number}
       */
      paid_holiday?: 0 | 1
      /**
       * Format: int32
       * @description 有給休暇の半休を利用した時間（分単位）
       */
      half_paid_holiday_mins?: number
      /**
       * Format: int32
       * @description 有給休暇の時間休を利用した時間（分単位）
       */
      hourly_paid_holiday_mins?: number
      /**
       * Format: float
       * @description この日の特別休暇取得日数。1日単位で指定します。
       * @example 1.0
       * @enum {number}
       */
      special_holiday?: 0 | 1
      /**
       * Format: int32
       * @description 特別休暇設定ID
       */
      special_holiday_setting_id?: number | null
      /**
       * Format: int32
       * @description 特別休暇の半休を利用した時間（分単位）
       */
      half_special_holiday_mins?: number
      /**
       * Format: int32
       * @description 特別休暇の時間休を利用した時間（分単位）
       */
      hourly_special_holiday_mins?: number
      /** @description 欠勤・遅刻・早退を控除対象時間に算入するかどうか */
      use_attendance_deduction?: boolean
      /** @description デフォルトの勤務設定を使うかどうか。
       *
       *     trueを指定した場合、以下のパラメータについて、指定した値に関係なく、従業員に設定した勤務賃金設定の休日の設定を参照して値が決まります
       *     - day_pattern
       *
       *     trueを指定した場合、以下のパラメータについて、指定した値に関係なく、従業員に設定した勤務賃金設定の出退勤時刻と労働時間の設定を参照して値が決まります。
       *     - normal_work_clock_in_at
       *     - normal_work_clock_out_at
       *     - normal_work_mins */
      use_default_work_pattern?: boolean
    }
    'ApiV1EmployeesWorkRecordSummaryController.update_body': {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: float
       * @description 総勤務日数
       */
      work_days?: number
      /**
       * Format: float
       * @description 所定労働日の勤務日数
       */
      work_days_on_weekdays?: number
      /**
       * Format: float
       * @description 所定休日の勤務日数
       */
      work_days_on_prescribed_holidays?: number
      /**
       * Format: float
       * @description 法定休日の勤務日数
       */
      work_days_on_legal_holidays?: number
      /** @description 労働時間（分） */
      total_work_mins?: number
      /** @description 所定労働時間（分） */
      total_normal_work_mins?: number
      /** @description 給与計算に用いられる法定内残業時間（分） */
      total_excess_statutory_work_mins?: number
      /** @description 法定休日労働時間（分） */
      total_holiday_work_mins?: number
      /** @description 深夜労働時間（分） */
      total_latenight_work_mins?: number
      /** @description 実労働時間ベースの法定内残業時間（分） */
      total_actual_excess_statutory_work_mins?: number
      /** @description 時間外労働時間（分） */
      total_overtime_work_mins?: number
      /**
       * Format: float
       * @description 欠勤日数
       */
      num_absences?: number
      /**
       * Format: float
       * @description 控除対象の欠勤日数
       *
       *     フレックスタイム制の場合は、指定した値が反映されず無視されます。
       */
      num_absences_for_deduction?: number
      /** @description 遅刻時間（分） */
      total_lateness_mins?: number
      /** @description 控除対象の遅刻時間（分）
       *
       *     フレックスタイム制と裁量労働制の場合は、指定した値が反映されず無視されます。 */
      total_lateness_mins_for_deduction?: number
      /** @description 早退時間（分） */
      total_early_leaving_mins?: number
      /** @description 控除対象の早退時間（分）
       *
       *     フレックスタイム制と裁量労働制の場合は、指定した値が反映されず無視されます。 */
      total_early_leaving_mins_for_deduction?: number
      /**
       * Format: float
       * @description 有給取得日数
       */
      num_paid_holidays?: number
      /** @description 不足時間（分）（フレックスタイム制でのみ使用） */
      total_shortage_work_mins?: number
      /** @description 支給対象の法定内残業時間（分）（裁量労働制でのみ使用） */
      total_deemed_paid_excess_statutory_work_mins?: number
      /** @description 支給対象の時間外労働時間（分）（裁量労働制でのみ使用） */
      total_deemed_paid_overtime_except_normal_work_mins?: number
    }
    'ApiV1EmployeesTimeClocksController.index_response': components['schemas']['ApiV1EmployeesTimeClockSerializer'][]
    'ApiV1EmployeesTimeClocksController.show_response': {
      employee_time_clock?: components['schemas']['ApiV1EmployeesTimeClockSerializer']
    }
    'ApiV1EmployeesTimeClocksController.available_types_response': {
      /** @description 打刻可能種別(clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤) */
      available_types?: (
        | 'clock_in'
        | 'break_begin'
        | 'break_end'
        | 'clock_out'
      )[]
      /**
       * Format: date
       * @description 打刻基準日
       * @example 2018-07-31
       */
      base_date?: string
    }
    'ApiV1EmployeesTimeClocksController.create_response': {
      employee_time_clock?: components['schemas']['ApiV1EmployeesTimeClockSerializer']
    }
    'ApiV1EmployeesTimeClocksController.create_body': {
      /**
       * Format: int32
       * @description (required)
       */
      company_id: number
      /**
       * @description 打刻種別（required）[clock_in:出勤, break_begin:休憩開始, break_end:休憩終了, clock_out:退勤]の何れか
       * @enum {string}
       */
      type: 'clock_in' | 'break_begin' | 'break_end' | 'clock_out'
      /**
       * Format: date
       * @description 打刻日。打刻が日をまたぐ場合に、前日の日付を指定します。(YYYY-MM-DD)(例:2018-07-31)
       * @example 2018-07-31
       */
      base_date?: string
      /**
       * Format: date-time
       * @description 打刻時刻。(YYYY-MM-DD&nbsp;HH:MM:SS)(例:2018-07-31&nbsp;08:00:00)
       * @example 2018-07-31 08:00:00
       */
      datetime?: string
    }
    'ApiV1SalariesEmployeePayrollStatementsController.index_response': {
      employee_payroll_statements?: components['schemas']['ApiV1SalariesEmployeePayrollStatementSerializer'][]
      /**
       * Format: int32
       * @description 指定した年月に支払いのある給与明細の合計件数
       * @example 1
       */
      total_count?: number
    }
    'ApiV1SalariesEmployeePayrollStatementsController.show_response': {
      employee_payroll_statement?: components['schemas']['ApiV1SalariesEmployeePayrollStatementSerializer']
    }
    'ApiV1BonusesEmployeePayrollStatementsController.show_response': {
      employee_payroll_statement?: components['schemas']['ApiV1BonusesEmployeePayrollStatementSerializer']
    }
    ApiV1GroupCreateRequest: {
      /**
       * Format: int32
       * @description 作成対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      group: components['schemas']['ApiV1GroupCreateRequestParams']
    }
    ApiV1GroupResponse: {
      group: components['schemas']['ApiV1GroupResponseParams']
    }
    ApiV1GroupUpdateRequest: {
      /**
       * Format: int32
       * @description 作成対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      group: components['schemas']['ApiV1GroupUpdateRequestParams']
    }
    ApiV1PositionResponse: {
      position: components['schemas']['ApiV1PositionResponseParams']
    }
    ApiV1PositionRequest: {
      /**
       * Format: int32
       * @description 作成対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      position: components['schemas']['ApiV1PositionRequestParams']
    }
    ApiV1MonthlyAttendanceIndexResponse: {
      monthly_attendances: components['schemas']['ApiV1MonthlyAttendanceIndexResponseParams'][]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count: number
    }
    ApiV1MonthlyAttendanceResponse: {
      monthly_attendance: components['schemas']['ApiV1MonthlyAttendanceResponseParams']
    }
    ApiV1MonthlyAttendanceCreateRequest: {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 対象年（必須）
       * @example 2022
       */
      target_year: number
      /**
       * Format: int32
       * @description 対象月（必須）
       * @example 1
       */
      target_month: number
      /**
       * Format: int32
       * @description 申請経路ID（必須）
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * Format: int32
       * @description 承認者のユーザーID
       * @example 1
       */
      approver_id?: number
    }
    ApiV1MonthlyAttendanceUpdateRequest: {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請経路ID（必須）
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * Format: int32
       * @description 承認者のユーザーID
       * @example 1
       */
      approver_id?: number
    }
    ApiV1WorkTimeIndexResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       */
      target_date: string
      /** @description 勤務時間削除フラグ（false:勤務時間を修正する、true:勤務時間を削除する） */
      clear_work_time: boolean
      /**
       * @description 勤務開始時間
       *       - 勤務時間が複数登録されている場合は、最初の勤務の出勤時間を返します。
       * @example 12:00
       */
      clock_in_at?: string | null
      /**
       * @description 勤務終了時間
       *       - 勤務時間が複数登録されている場合は、最後の勤務の退勤時間を返します。
       * @example 23:59
       */
      clock_out_at?: string | null
      /** @description 勤務時間のリスト
       *       - 登録されている全ての勤務時間のリストを返します。 */
      work_records?: {
        /**
         * @description 開始時刻
         * @example 12:00
         */
        clock_in_at: string
        /**
         * @description 終了時刻
         * @example 23:59
         */
        clock_out_at: string
      }[]
      /**
       * Format: int32
       * @description 遅刻分の時間（分単位）
       */
      lateness_mins: number
      /**
       * Format: int32
       * @description 早退分の時間（分単位）
       */
      early_leaving_mins: number
      /** @description 休憩時間のリスト */
      break_records?: {
        /**
         * @description 開始時刻
         * @example 12:00
         */
        clock_in_at: string
        /**
         * @description 終了時刻
         * @example 23:59
         */
        clock_out_at: string
      }[]
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string | null
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
    }
    ApiV1WorkTimeResponseParams: {
      /**
       * Format: int32
       * @description 申請ID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * Format: int32
       * @description 申請No
       * @example 1
       */
      application_number: number
      /**
       * Format: int32
       * @description 申請者のユーザーID
       * @example 1
       */
      applicant_id: number
      /** @description 承認者のユーザーID配列
       *     次の場合、空配列になります。
       *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
       *     - 申請が差戻された */
      approver_ids?: (number | null)[]
      /**
       * Format: date
       * @description 対象日
       */
      target_date: string
      /**
       * @description 勤務時間削除フラグ（false:勤務時間を修正する、true:勤務時間を削除する）
       * @example false
       */
      clear_work_time: boolean
      /**
       * @description 勤務開始時間
       *       - 勤務が複数登録されている場合は、最初の勤務の出勤時間を返します。
       * @example 12:00
       */
      clock_in_at?: string | null
      /**
       * @description 勤務終了時間
       *       - 勤務が複数登録されている場合は、最後の勤務の退勤時間を返します。
       * @example 23:59
       */
      clock_out_at?: string | null
      /** @description 勤務時間のリスト
       *       - 登録されている全ての勤務時間のリストを返します。 */
      work_records?: components['schemas']['ApiV1WorkTimeIndexResponseParams']['work_records']['items'][]
      /**
       * Format: int32
       * @description 遅刻分の時間（分単位）
       */
      lateness_mins: number
      /**
       * Format: int32
       * @description 早退分の時間（分単位）
       */
      early_leaving_mins: number
      /** @description 休憩時間のリスト */
      break_records?: components['schemas']['ApiV1WorkTimeIndexResponseParams']['break_records']['items'][]
      /**
       * Format: date
       * @description 申請日
       */
      issue_date: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string | null
      /**
       * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
       * @example in_progress
       * @enum {string}
       */
      status: 'draft' | 'in_progress' | 'approved' | 'feedback'
      /**
       * @description 自動チェック結果
       * @example true
       */
      passed_auto_check: boolean
      /**
       * @description 申請経路ID
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * @description 申請経路名
       * @example 申請経路
       */
      approval_flow_route_name: string
      /** @description 承認履歴 */
      approval_flow_logs: components['schemas']['ApiV1ApprovalFlowLogsParams'][]
      /**
       * Format: int32
       * @description 現在承認ステップID<br>
       *     申請を差戻した場合、nullになります。
       * @example 1
       */
      current_step_id?: number | null
      /**
       * Format: int32
       * @description 現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
       * @example 1
       */
      current_round: number
    }
    ApiV1PaidHolidayIndexResponse: {
      paid_holidays: components['schemas']['ApiV1PaidHolidayIndexResponseParams'][]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count: number
    }
    ApiV1PaidHolidayResponse: {
      paid_holiday: components['schemas']['ApiV1PaidHolidayResponseParams']
    }
    ApiV1PaidHolidayRequest: {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: date
       * @description 対象日（必須）
       * @example 2018-07-31
       */
      target_date: string
      /**
       * @description 取得単位（必須）（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）
       * @example half
       * @enum {string}
       */
      holiday_type: 'full' | 'half' | 'morning' | 'afternoon' | 'hour'
      /**
       * @description 取得予定開始時間
       * @example 12:00
       */
      start_at?: string
      /**
       * @description 取得予定終了時間
       * @example 23:59
       */
      end_at?: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string
      /**
       * Format: int32
       * @description 申請経路ID（必須）
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * Format: int32
       * @description 承認者のユーザーID
       * @example 1
       */
      approver_id?: number
    }
    ApiV1specialHolidayIndexResponse: {
      special_holidays: {
        /**
         * Format: int32
         * @description 申請ID
         * @example 1
         */
        id: number
        /**
         * Format: int32
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * Format: int32
         * @description 申請No
         * @example 1
         */
        application_number: number
        /**
         * Format: int32
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id: number
        /** @description 承認者のユーザーID配列<br>
         *     次の場合、空配列になります。
         *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
         *     - 申請が差戻された */
        approver_ids?: (number | null)[]
        /**
         * Format: date
         * @description 対象日
         */
        target_date: string
        /**
         * Format: int32
         * @description 特別休暇設定ID
         * @example 1
         */
        special_holiday_setting_id: number
        /**
         * @description 特別休暇名称
         * @example 特別休暇名称
         */
        special_holiday_name: string
        /**
         * @description 取得単位。（full:全休、half:半休、morning:午前休、afternoon:午後休、hour:時間休）
         * @example half
         * @enum {string}
         */
        holiday_type: 'full' | 'half' | 'morning' | 'afternoon' | 'hour'
        /**
         * @description 取得予定開始時間
         * @example 12:00
         */
        start_at?: string | null
        /**
         * @description 取得予定終了時間
         * @example 23:59
         */
        end_at?: string | null
        /**
         * Format: date
         * @description 申請日
         */
        issue_date: string
        /**
         * @description 申請理由
         * @example 申請理由
         */
        comment?: string | null
        /**
         * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
         * @example in_progress
         * @enum {string}
         */
        status: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）
         * @example null
         * @enum {string|null}
         */
        revoke_status: 'revoking' | 'revoked' | null
        /**
         * @description 自動チェック結果
         * @example true
         */
        passed_auto_check: boolean
      }[]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count: number
    }
    ApiV1specialHolidayResponse: {
      special_holiday: {
        /**
         * Format: int32
         * @description 申請ID
         * @example 1
         */
        id: number
        /**
         * Format: int32
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * Format: int32
         * @description 申請No
         * @example 1
         */
        application_number: number
        /**
         * Format: int32
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id: number
        /** @description 承認者のユーザーID配列<br>
         *     次の場合、空配列になります。
         *     - 指定なしの申請経路を利用した、申請ステータスが承認済み以外の申請
         *     - 申請が差戻された */
        approver_ids?: (number | null)[]
        /**
         * Format: date
         * @description 対象日
         */
        target_date: string
        /**
         * Format: int32
         * @description 特別休暇設定ID
         * @example 1
         */
        special_holiday_setting_id: number
        /**
         * @description 特別休暇名称
         * @example 特別休暇名称
         */
        special_holiday_name: string
        /**
         * @description 取得単位。（full:全休、half:半休、morning:午前休、afternoon:午後休、hour:時間休）
         * @example half
         * @enum {string}
         */
        holiday_type: 'full' | 'half' | 'morning' | 'afternoon' | 'hour'
        /**
         * @description 取得予定開始時間
         * @example 12:00
         */
        start_at?: string | null
        /**
         * @description 取得予定終了時間
         * @example 23:59
         */
        end_at?: string | null
        /**
         * Format: date
         * @description 申請日
         */
        issue_date: string
        /**
         * @description 申請理由
         * @example 申請理由
         */
        comment?: string | null
        /**
         * @description 申請ステータス。（draft:下書き、in_progress:申請中、approved:承認済、feedback:差戻し）
         * @example in_progress
         * @enum {string}
         */
        status: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 取消申請ステータス。（null:取消申請されてない、revoking:取消中、revoked:取消済）
         * @example null
         * @enum {string|null}
         */
        revoke_status: 'revoking' | 'revoked' | null
        /**
         * @description 自動チェック結果
         * @example true
         */
        passed_auto_check: boolean
        /**
         * @description 申請経路ID
         * @example 1
         */
        approval_flow_route_id: number
        /**
         * @description 申請経路名
         * @example 申請経路
         */
        approval_flow_route_name: string
        /** @description 承認履歴 */
        approval_flow_logs: components['schemas']['ApiV1ApprovalFlowLogsParams'][]
        /**
         * Format: int32
         * @description 現在承認ステップID<br>
         *     申請を差戻した場合、nullになります。
         * @example 1
         */
        current_step_id?: number | null
        /**
         * Format: int32
         * @description 現在のround。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。
         * @example 1
         */
        current_round: number
      }
    }
    ApiV1specialHolidayRequest: {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: date
       * @description 対象日（必須）
       * @example 2018-07-31
       */
      target_date: string
      /**
       * Format: int32
       * @description 特別休暇設定ID（必須）
       * @example 1
       */
      special_holiday_setting_id: number
      /**
       * @description 取得単位（必須）（full:全休、half:半休、morning:午前休、 afternoon:午後休、hour:時間休）
       * @example half
       * @enum {string}
       */
      holiday_type: 'full' | 'half' | 'morning' | 'afternoon' | 'hour'
      /**
       * @description 取得予定開始時間（条件付き必須）
       *     取得単位が半休、時間休の場合は必須
       * @example 12:00
       */
      start_at?: string
      /**
       * @description 取得予定終了時間（条件付き必須）
       *     取得単位が半休、時間休の場合は必須
       * @example 23:59
       */
      end_at?: string
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string
      /**
       * Format: int32
       * @description 申請経路ID（必須）
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * Format: int32
       * @description 承認者のユーザーID
       * @example 1
       */
      approver_id?: number
    }
    ApiV1OvertimeWorkIndexResponse: {
      overtime_works: components['schemas']['ApiV1OvertimeWorkIndexResponseParams'][]
      /**
       * Format: int32
       * @description 合計件数
       * @example 1
       */
      total_count: number
    }
    ApiV1OvertimeWorkResponse: {
      overtime_work: components['schemas']['ApiV1OvertimeWorkResponseParams']
    }
    ApiV1OvertimeWorkRequest: {
      /**
       * Format: int32
       * @description 事業所ID（必須）
       * @example 1
       */
      company_id: number
      /**
       * Format: date
       * @description 対象日（必須）
       */
      target_date: string
      /**
       * @description 取得予定開始時間
       * @example 12:00
       */
      start_at?: string
      /**
       * @description 取得予定終了時間
       * @example 23:59
       */
      end_at?: string
      /**
       * @description 実績反映ありの早出申請の開始予定時刻
       *     実績反映ありの早出申請する場合は必須
       * @example 12:00
       */
      early_work_start_at?: string | null
      /**
       * @description 実績反映ありの早出申請の終了予定時刻
       *     実績反映ありの早出申請する場合は必須
       * @example 23:59
       */
      early_work_end_at?: string | null
      /**
       * @description 実績反映ありの残業申請の開始予定時刻
       *     実績反映ありの残業申請する場合は必須
       * @example 12:00
       */
      overtime_work_start_at?: string | null
      /**
       * @description 実績反映ありの残業申請の終了予定時刻
       *     実績反映ありの残業申請する場合は必須
       * @example 23:59
       */
      overtime_work_end_at?: string | null
      /**
       * @description 申請理由
       * @example 申請理由
       */
      comment?: string
      /**
       * Format: int32
       * @description 申請経路ID（必須）
       * @example 1
       */
      approval_flow_route_id: number
      /**
       * Format: int32
       * @description 承認者のユーザーID
       * @example 1
       */
      approver_id?: number
    }
    ApiV1ApprovalActionRequest: {
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * @description 申請操作。（approve:承認、cancel:取り消し、feedback:差戻し、force_feedback:承認取り消し）
       * @example approve
       * @enum {string}
       */
      approval_action: 'approve' | 'cancel' | 'feedback' | 'force_feedback'
      /**
       * Format: int32
       * @description 対象round。差戻し等により申請がstepの最初からやり直しになるとroundの値が増えます。取得APIレスポンス.current_roundを送信してください。
       * @example 1
       */
      target_round: number | null
      /**
       * Format: int32
       * @description 対象承認ステップID。取得APIレスポンス.current_step_idを送信してください。
       * @example 1
       */
      target_step_id: number | null
      /**
       * Format: int32
       * @description 次のステップの承認者のユーザーID
       * @example 1
       */
      next_approver_id?: number | null
      /**
       * @description 時間表記を48時間形式で返却するか
       *     - `true` を指定した場合、時間表記を48時間形式で返却します。（推奨）
       *     - `false` を指定した場合、時間表記を24時間形式で返却します。
       *     - 未指定の場合はfalseと見なし、24時間形式で返却します。
       * @default false
       * @example false
       */
      use_48h_time_notation: boolean
    }
    ApiV1ApprovalFlowRoutesIndexResponse: {
      approval_flow_routes: components['schemas']['ApiV1ApprovalFlowRouteIndexResponseParams'][]
    }
    ApiV1ApprovalFlowRouteIndexResponseParams: {
      /**
       * @description 申請経路ID
       * @example 1
       */
      id: number
      /**
       * @description 申請経路名
       * @example 申請経路
       */
      name?: string
      /**
       * @description 申請経路の説明
       * @example 申請経路の説明
       */
      description?: string
      /**
       * @description 更新したユーザーのユーザーID
       * @example 1
       */
      user_id?: number | null
      /**
       * @description システム作成の申請経路かどうか
       * @example true
       */
      definition_system?: boolean
      /**
       * @description 最初の承認ステップのID
       * @example 1
       */
      first_step_id?: number
      /** @description 申請種別（申請経路を使用できる申請種別を示します。例えば、AttendanceWorkflow の場合は、勤怠申請で使用できる申請経路です。）
       *     - AttendanceWorkflow - 勤怠申請
       *     - PersonalDataWorkflow - 身上変更申請 */
      usages?: ('AttendanceWorkflow' | 'PersonalDataWorkflow')[]
    }
    ApiV1ApprovalFlowRouteResponse: {
      approval_flow_route: components['schemas']['ApiV1ApprovalFlowRouteResponseParams']
    }
    ApiV1ApprovalFlowRouteResponseParams: {
      /**
       * @description 申請経路ID
       * @example 1
       */
      id: number
      /**
       * @description 申請経路名
       * @example 申請経路
       */
      name?: string
      /**
       * @description 申請経路の説明
       * @example 申請経路の説明
       */
      description?: string
      /**
       * @description 更新したユーザーのユーザーID
       * @example 1
       */
      user_id?: number | null
      /**
       * @description システム作成の申請経路かどうか
       * @example true
       */
      definition_system?: boolean
      /**
       * @description 最初の承認ステップのID
       * @example 1
       */
      first_step_id?: number
      /** @description 申請種別（申請経路を使用できる申請種別を示します。例えば、AttendanceWorkflow の場合は、勤怠申請で使用できる申請経路です。）
       *     - AttendanceWorkflow - 勤怠申請
       *     - PersonalDataWorkflow - 身上変更申請 */
      usages?: ('AttendanceWorkflow' | 'PersonalDataWorkflow')[]
      steps?: components['schemas']['ApiV1FlowRouteStepSrializer']
    }
    /** @description 承認ステップ（配列） */
    ApiV1FlowRouteStepSrializer: {
      /**
       * @description 承認ステップID
       * @example 1
       */
      id: number
      /**
       * @description 次の承認ステップID
       * @example 2
       */
      next_step_id: number | null
      /**
       * @description 承認方法( predefined_user: メンバー指定 (1人), selected_user: 申請時にメンバー指定,unspecified: 指定なし, and_resource: メンバー指定 (複数、全員の承認), or_resource: メンバー指定 (複数、1人の承認), and_position: 役職指定 (複数、全員の承認), or_position: 役職指定 (複数、1人の承認) )
       * @example predefined_user
       * @enum {string}
       */
      resource_type:
        | 'predefined_user'
        | 'selected_user'
        | 'unspecified'
        | 'and_resource'
        | 'or_resource'
        | 'and_position'
        | 'or_position'
      /** @description 承認者のユーザーID (配列) */
      user_ids?: number[]
    }[]
    'ApiV1EmployeeYearendAdjustmentController.index_response': {
      employees?: components['schemas']['ApiV1EmployeeYearendAdjustmentParams'][]
      /**
       * Format: int32
       * @description 合計件数
       */
      total_count?: number
    }
    ApiV1EmployeeYearendAdjustmentParams: {
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /** @description 従業員番号 */
      num?: string | null
      /** @description 従業員名 */
      employee_display_name?: string
      /** @description 年末調整対象外
       *     - true - 年末調整対象外
       *     - false - 年末調整対象 */
      is_not_adjust?: boolean
      /**
       * @description 年末調整ステータス
       *     - initialized - 入力依頼前
       *     - in_employee_progress - 従業員入力中
       *     - submitted - 従業員入力済
       *     - fixed - 確定
       * @enum {string}
       */
      status?: 'initialized' | 'in_employee_progress' | 'submitted' | 'fixed'
    }
    'ApiV1EmployeeYearendAdjustmentController.update_employee_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      employee: components['schemas']['ApiV1EmployeeYearendAdjustmentEmployeeUpdateRequestSerializer']
    }
    ApiV1EmployeeYearendAdjustmentEmployeeUpdateRequestSerializer: {
      /**
       * @description 姓 null不可
       * @example 山田
       */
      last_name: string
      /**
       * @description 名 null不可
       * @example 太郎
       */
      first_name: string
      /**
       * @description 姓カナ
       * @example ヤマダ
       */
      last_name_kana: string
      /**
       * @description 名カナ
       * @example タロウ
       */
      first_name_kana: string
      /**
       * @description 住民票住所の郵便番号1
       * @example 141
       */
      zipcode1: string
      /**
       * @description 住民票住所の郵便番号2
       * @example 0031
       */
      zipcode2: string
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 12
       */
      prefecture_code: number
      /**
       * @description 住民票住所の市区町村以降の住所
       * @example 品川区大崎1-2-2
       */
      address: string
      /**
       * @description 住民票住所の市区町村以降の住所カナ
       * @example シナガワクオオサキ1-2-2
       */
      address_kana?: string
      /**
       * @description 所得税納税者区分 kou: 甲, otsu: 乙, hei: 丙
       * @enum {string}
       */
      payer_type?: 'kou' | 'otsu' | 'hei'
      /**
       * @description 寡夫／寡婦かどうか null不可 na: 空白, widow: 寡婦, one_parent: ひとり親
       * @enum {string}
       */
      widow_type?: 'na' | 'widow' | 'one_parent'
      /**
       * @description 障害者かどうか null不可 na: 空白, general: 障害者, heavy: 特別障害者
       * @enum {string}
       */
      disability_type?: 'na' | 'general' | 'heavy'
      /** @description 配偶者の有無 null不可 */
      married?: boolean
      /** @description 勤労学生かどうか null不可 */
      is_working_student?: boolean
      /** @description 外国人かどうか null不可 */
      is_foreigner?: boolean
      /**
       * @description その他の事業所の給与収入
       * @example 1000000
       */
      other_company_revenue?: number | null
      /**
       * @description 給与以外の所得
       * @example 1000000
       */
      all_other_income?: number | null
      /**
       * @description 世帯主の続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他
       * @enum {string}
       */
      householder?:
        | 'myself'
        | 'husband'
        | 'wife'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
      /**
       * @description 世帯主の名前
       * @example 山田 太郎
       */
      householder_name?: string
    }
    'ApiV1EmployeeYearendAdjustmentController.update_employee_response': {
      employees?: components['schemas']['ApiV1EmployeeYearendAdjustmentEmployeeSerializer']
    }
    ApiV1EmployeeYearendAdjustmentEmployeeSerializer: {
      /**
       * Format: int32
       * @description 従業員ID
       */
      employee_id?: number
      /**
       * @description 従業員番号<br>
       *     従業員を判別しやすいよう管理することができます。（例: 1人目の正社員を A-001 と入力）
       * @example A-001
       */
      num?: string | null
      /**
       * @description 姓 null不可
       * @example 山田
       */
      last_name?: string
      /**
       * @description 名 null不可
       * @example 太郎
       */
      first_name?: string
      /**
       * @description 姓カナ
       * @example ヤマダ
       */
      last_name_kana?: string
      /**
       * @description 名カナ
       * @example タロウ
       */
      first_name_kana?: string
      /**
       * Format: date
       * @description 生年月日
       */
      birth_date?: string
      /**
       * Format: date
       * @description 入社日
       */
      entry_date?: string
      /**
       * Format: date
       * @description 退職日
       */
      retire_date?: string | null
      /** @description 雇用形態 board-member: 役員, (空文字列): 役員以外 */
      employment_type?: string | null
      /** @description 肩書 */
      title?: string | null
      /**
       * @description 住民票住所の郵便番号1
       * @example 141
       */
      zipcode1?: string | null
      /**
       * @description 住民票住所の郵便番号2
       * @example 0031
       */
      zipcode2?: string | null
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)
       * @example 12
       */
      prefecture_code?: number | null
      /**
       * @description 住民票住所の市区町村以降の住所
       * @example 品川区大崎1-2-2
       */
      address?: string | null
      /**
       * @description 住民票住所の市区町村以降の住所カナ
       * @example シナガワクオオサキ1-2-2
       */
      address_kana?: string
      /**
       * @description 所得税納税者区分 kou: 甲, otsu: 乙, hei: 丙
       * @enum {string}
       */
      payer_type?: 'kou' | 'otsu' | 'hei'
      /**
       * @description 寡夫／寡婦かどうか null不可 na: 空白, widow: 寡婦, one_parent: ひとり親
       * @enum {string}
       */
      widow_type?: 'na' | 'widow' | 'one_parent'
      /**
       * @description 障害者かどうか na: 空白, general: 障害者, heavy: 特別障害者
       * @enum {string}
       */
      disability_type?: 'na' | 'general' | 'heavy'
      /** @description 配偶者の有無 */
      married?: boolean
      /** @description 勤労学生かどうか */
      is_working_student?: boolean
      /** @description 外国人かどうか */
      is_foreigner?: boolean
      /**
       * @description その他の事業所の給与収入
       * @example 1000000
       */
      other_company_revenue?: number | null
      /**
       * @description 給与以外の所得
       * @example 1000000
       */
      all_other_income?: number | null
      /**
       * @description 世帯主の続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他
       * @enum {string}
       */
      householder?:
        | 'myself'
        | 'husband'
        | 'wife'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
      /**
       * @description 世帯主の名前
       * @example 山田 太郎
       */
      householder_name?: string
      /** @description 所得税の計算対象かどうか */
      is_calc_income_tax?: boolean
    }
    'ApiV1EmployeeYearendAdjustmentController.show_response': {
      /** @description 本人情報 */
      employee?: components['schemas']['ApiV1EmployeeYearendAdjustmentEmployeeSerializer']
      /** @description 家族情報(年末調整対象外の場合は取得できません。) */
      dependents?: components['schemas']['ApiV1EmployeeYearendAdjustmentDependentSerializer'][]
      /** @description 保険料情報(年末調整対象外の場合は取得できません。) */
      insurances?: components['schemas']['ApiV1EmployeeYearendAdjustmentInsuranceSerializer'][]
      /**
       * Format: int32
       * @description 住宅借入金等特別控除(年末調整対象外の場合は取得できません。)
       * @example 500000
       */
      housing_loan_deduction?: number
      /** @description 住宅ローン(年末調整対象外の場合は取得できません。) */
      housing_loans?: components['schemas']['ApiV1EmployeeYearendAdjustmentHousingLoanSerializer'][]
      /** @description 給与・賞与 */
      payroll_and_bonus?: components['schemas']['ApiV1EmployeeYearendAdjustmentPayrollAndBonusSerializer']
      /** @description 前職情報 */
      previous_job?: components['schemas']['ApiV1EmployeeYearendAdjustmentPreviousJobSerializer']
    }
    ApiV1EmployeeYearendAdjustmentPayrollAndBonusSerializer: {
      /**
       * Format: int32
       * @description 確定給与額
       * @example 10000000
       */
      fixed_payroll?: number
      /**
       * Format: int32
       * @description 確定給与控除額
       * @example 1000000
       */
      fixed_payroll_deduction?: number
      /**
       * Format: int32
       * @description 確定給与所得税額
       * @example 1000000
       */
      fixed_payroll_income_tax?: number
      /**
       * Format: int32
       * @description 確定賞与額
       * @example 10000000
       */
      fixed_bonus?: number
      /**
       * Format: int32
       * @description 確定賞与控除額
       * @example 1000000
       */
      fixed_bonus_deduction?: number
      /**
       * Format: int32
       * @description 確定賞与所得税額
       * @example 1000000
       */
      fixed_bonus_income_tax?: number
      /**
       * Format: int32
       * @description 未入力給与額
       * @example 500000
       */
      unentered_payroll_amount?: number
      /**
       * Format: int32
       * @description 未入力給与控除額
       * @example 500000
       */
      unentered_payroll_deduction_amount?: number
      /**
       * Format: int32
       * @description 未入力給与所得税額
       * @example 500000
       */
      unentered_payroll_income_tax_amount?: number
      /**
       * Format: int32
       * @description 未入力賞与額
       * @example 500000
       */
      unentered_bonus_amount?: number
      /**
       * Format: int32
       * @description 未入力賞与控除額
       * @example 500000
       */
      unentered_bonus_deduction_amount?: number
      /**
       * Format: int32
       * @description 未入力賞与所得税額
       * @example 500000
       */
      unentered_bonus_income_tax_amount?: number
    }
    ApiV1EmployeeYearendAdjustmentPayrollAndBonusUpdateRequestSerializer: {
      /**
       * Format: int32
       * @description 未入力給与額
       * @example 1000000
       */
      unentered_payroll_amount?: number
      /**
       * Format: int32
       * @description 未入力給与控除額
       * @example 1000000
       */
      unentered_payroll_deduction_amount?: number
      /**
       * Format: int32
       * @description 未入力給与所得税額
       * @example 1000000
       */
      unentered_payroll_income_tax_amount?: number
      /**
       * Format: int32
       * @description 未入力賞与額
       * @example 1000000
       */
      unentered_bonus_amount?: number
      /**
       * Format: int32
       * @description 未入力賞与控除額
       * @example 1000000
       */
      unentered_bonus_deduction_amount?: number
      /**
       * Format: int32
       * @description 未入力賞与所得税額
       * @example 1000000
       */
      unentered_bonus_income_tax_amount?: number
    }
    'ApiV1EmployeeYearendAdjustmentController.update_payroll_and_bonus_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      payroll_and_bonus: components['schemas']['ApiV1EmployeeYearendAdjustmentPayrollAndBonusUpdateRequestSerializer']
    }
    'ApiV1EmployeeYearendAdjustmentController.update_payroll_and_bonus_response': {
      payroll_and_bonus?: components['schemas']['ApiV1EmployeeYearendAdjustmentPayrollAndBonusSerializer']
    }
    'ApiV1EmployeeYearendAdjustmentController.update_dependents_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      /** @description 家族情報 */
      dependents: components['schemas']['ApiV1EmployeeYearendAdjustmentDependentUpdateRequestSerializer'][]
    }
    ApiV1EmployeeYearendAdjustmentDependentUpdateRequestSerializer: {
      /**
       * Format: int32
       * @description 家族情報ID（idがない場合は新規作成になる)
       * @example 1
       */
      id?: number
      /**
       * @description 家族情報を削除するか true: 削除する, false: 削除しない
       * @example false
       */
      destroy?: boolean
      /**
       * @description 姓 null不可
       * @example 山田
       */
      last_name: string
      /**
       * @description 名 null不可
       * @example 花子
       */
      first_name: string
      /**
       * @description 姓カナ
       * @example ヤマダ
       */
      last_name_kana?: string
      /**
       * @description 名カナ
       * @example ハナコ
       */
      first_name_kana?: string
      /**
       * @description 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
       * @enum {string}
       */
      relationship:
        | 'spouse'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
        | 'great_grandfather'
        | 'great_grandmother'
        | 'spouses_child'
      /**
       * Format: date
       * @description 生年月日 null不可 1900年1月1日から現在年+5の12月31日まで登録可能
       * @example 1999-01-01
       */
      birth_date: string
      /**
       * @description 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
       * @enum {string}
       */
      social_insurance_and_tax_dependent:
        | 'social_insurance_and_tax'
        | 'tax_only'
        | 'social_insurance_only'
        | 'not_dependent'
      /**
       * Format: int32
       * @description 所得 配偶者は「扶養状況」がsocial_insurance_only又はnot_dependentの場合のみ更新可能。配偶者以外は更新可能。 配偶者で「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合、「給与収入」、「給与以外の所得」から自動で「所得」が計算されます。
       */
      income?: number
      /**
       * Format: int32
       * @description 給与収入 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。
       */
      employment_revenue?: number
      /**
       * Format: int32
       * @description 給与以外の所得 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。
       */
      all_other_income?: number
      /**
       * @description 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
       * @enum {string}
       */
      disability_type: 'na' | 'general' | 'heavy'
      /**
       * @description 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
       * @enum {string}
       */
      residence_type: 'live_in' | 'resident' | 'non_resident'
      /**
       * @description 住民票住所の郵便番号1 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号1」を登録
       * @example 141
       */
      zipcode1?: string | null
      /**
       * @description 住民票住所の郵便番号2 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号2」を登録
       * @example 0031
       */
      zipcode2?: string | null
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)  「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の都道府県コード」を登録
       * @example 12
       */
      prefecture_code?: number
      /**
       * @description 住民票住所の市区町村以降の住所 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所」を登録
       * @example 品川区大崎1-2-2
       */
      address?: string
      /**
       * @description 住民票住所の市区町村以降の住所カナ 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所カナ」を登録
       * @example シナガワクオオサキ1-2-2
       */
      address_kana?: string
      /**
       * Format: int32
       * @description 国外居住親族への年間の送金額 「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
       */
      annual_remittance_amount?: number
      /**
       * Format: string
       * @description 非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
       * @enum {string}
       */
      non_resident_dependents_reason?:
        | 'none'
        | 'over_16_to_under_30_or_over_70'
        | 'study_abroad'
        | 'handicapped'
        | 'over_38_man'
      /** @description 住民税のみの控除対象かどうか */
      is_resident_tax_only_deduction?: boolean
      /**
       * Format: int32
       * @description 退職所得
       */
      retirement_income?: number
    }
    'ApiV1EmployeeYearendAdjustmentController.update_dependents_response': {
      /** @description 家族情報 */
      dependents?: components['schemas']['ApiV1EmployeeYearendAdjustmentDependentSerializer'][]
    }
    ApiV1EmployeeYearendAdjustmentDependentSerializer: {
      /**
       * Format: int32
       * @description 家族情報ID
       * @example 1
       */
      id?: number
      /**
       * @description 姓 null不可
       * @example 山田
       */
      last_name?: string
      /**
       * @description 名 null不可
       * @example 花子
       */
      first_name?: string
      /**
       * @description 姓カナ
       * @example ヤマダ
       */
      last_name_kana?: string
      /**
       * @description 名カナ
       * @example ハナコ
       */
      first_name_kana?: string
      /**
       * @description 続柄 null不可 spouse: 配偶者, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, great_grandfather: 曽祖父, great_grandmother: 曽祖母, spouses_child: 配偶者の連れ子
       * @enum {string}
       */
      relationship?:
        | 'spouse'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
        | 'great_grandfather'
        | 'great_grandmother'
        | 'spouses_child'
      /**
       * Format: date
       * @description 生年月日 null不可 1900年1月1日から現在年+5年12月31日まで登録可能
       * @example 1999-01-01
       */
      birth_date?: string
      /**
       * @description 扶養状況 social_insurance_and_tax: 所得税・住民税と社会保険, tax_only: 所得税・住民税のみ, social_insurance_only: 社会保険のみ, not_dependent: 扶養していない
       * @enum {string}
       */
      social_insurance_and_tax_dependent?:
        | 'social_insurance_and_tax'
        | 'tax_only'
        | 'social_insurance_only'
        | 'not_dependent'
      /**
       * Format: int32
       * @description 所得 配偶者は「扶養状況」がsocial_insurance_only又はnot_dependentの場合のみ更新可能。配偶者以外は更新可能。 配偶者で「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合、「給与収入」、「給与以外の所得」から自動で「所得」が計算されます。
       */
      income?: number
      /**
       * Format: int32
       * @description 給与収入 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。
       */
      employment_revenue?: number
      /**
       * Format: int32
       * @description 給与以外の所得 配偶者は「扶養状況」がsocial_insurance_and_tax又はtax_onlyの場合のみ更新可能。配偶者以外は更新不可。更新不可の場合は0となります。
       */
      all_other_income?: number
      /**
       * @description 障害に該当するか null不可 na: 障害なし, general: 一般の障害者, heavy: 特別障害者
       * @enum {string}
       */
      disability_type?: 'na' | 'general' | 'heavy'
      /**
       * @description 同居・別居 null不可 live_in: 同居, resident: 別居(国内), non_resident: 別居(国外)
       * @enum {string}
       */
      residence_type?: 'live_in' | 'resident' | 'non_resident'
      /**
       * @description 住民票住所の郵便番号1 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号1」を登録
       * @example 141
       */
      zipcode1?: string | null
      /**
       * @description 住民票住所の郵便番号2 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の郵便番号2」を登録
       * @example 0031
       */
      zipcode2?: string | null
      /**
       * @description 住民票住所の都道府県コード（-1: 設定しない、0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄)  「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の都道府県コード」を登録
       * @example 12
       */
      prefecture_code?: number
      /**
       * @description 住民票住所の市区町村以降の住所 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所」を登録
       * @example 品川区大崎1-2-2
       */
      address?: string
      /**
       * @description 住民票住所の市区町村以降の住所カナ 「同居・別居」が「同居」の場合は「年末調整従業員情報」の「住民票住所の市区町村以降の住所カナ」を登録
       * @example シナガワクオオサキ1-2-2
       */
      address_kana?: string
      /**
       * Format: int32
       * @description 国外居住親族への年間の送金額 「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
       */
      annual_remittance_amount?: number
      /**
       * Format: string
       * @description 非居住者である親族の条件 none: なし, over_16_to_under_30_or_over_70: 16歳以上30歳未満又は70歳以上, study_abroad: 留学, handicapped: 障害者, over_38_man: 38万円以上の支払 続柄が「配偶者」または「同居・別居」が「同居」、「別居(国内)」の場合は登録不可
       * @enum {string}
       */
      non_resident_dependents_reason?:
        | 'none'
        | 'over_16_to_under_30_or_over_70'
        | 'study_abroad'
        | 'handicapped'
        | 'over_38_man'
      /** @description 住民税のみの控除対象かどうか */
      is_resident_tax_only_deduction?: boolean
      /**
       * Format: int32
       * @description 退職所得
       */
      retirement_income?: number
    }
    'ApiV1EmployeeYearendAdjustmentController.update_previous_job_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      previous_job: components['schemas']['ApiV1EmployeeYearendAdjustmentPreviousJobUpdateRequestSerializer']
    }
    ApiV1EmployeeYearendAdjustmentPreviousJobUpdateRequestSerializer: {
      /**
       * @description 前職の支払金額
       * @example 5000000
       */
      income: number
      /**
       * @description 前職の社会保険料等の金額
       * @example 1200000
       */
      deduction: number
      /**
       * @description 前職の源泉徴収額
       * @example 100000
       */
      withholding_tax_amount: number
      /**
       * @description 前職の社名
       * @example 株式会社 前職
       */
      company_name: string
      /**
       * @description 前職の事業所住所
       * @example 品川区大崎1-2-2
       */
      company_address: string
      /**
       * Format: date
       * @description 前職の退職日 現在年-10年1月1日から現在年+5年12月31日まで登録可能
       * @example 2022-03-31
       */
      retire_date: string
    }
    'ApiV1EmployeeYearendAdjustmentController.update_previous_job_response': {
      previous_job?: components['schemas']['ApiV1EmployeeYearendAdjustmentPreviousJobSerializer']
    }
    ApiV1EmployeeYearendAdjustmentPreviousJobSerializer: {
      /**
       * @description 前職の支払金額
       * @example 5000000
       */
      income?: number
      /**
       * @description 前職の社会保険料等の金額
       * @example 1200000
       */
      deduction?: number
      /**
       * @description 前職の源泉徴収額
       * @example 100000
       */
      withholding_tax_amount?: number
      /**
       * @description 前職の社名
       * @example 株式会社 前職
       */
      company_name?: string
      /**
       * @description 前職の事業所住所
       * @example 品川区大崎1-2-2
       */
      company_address?: string
      /**
       * Format: date
       * @description 前職の退職日 現在年-10年1月1日から現在年+5年12月31日まで登録可能
       * @example 2022-03-31
       */
      retire_date?: string
    } | null
    'ApiV1EmployeeYearendAdjustmentController.update_insurance_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      insurance: components['schemas']['ApiV1EmployeeYearendAdjustmentInsuranceUpdateRequestSerializer']
    }
    ApiV1EmployeeYearendAdjustmentInsuranceUpdateRequestSerializer: {
      /**
       * @description 保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）
       * @enum {string}
       */
      type:
        | 'life_care_pension_insurance'
        | 'earthquake_non_life_insurance'
        | 'social_insurance'
        | 'other_insurance'
      /**
       * @description 区分<br>
       *     保険会社等が発行する証明書類に基づいて区分を設定してください。<br>
       *     保険の種類によって設定可能な値が変わります。<br>
       *     ・life_care_pension_insurance<br>
       *     　life: 生命保険<br>
       *     　care: 介護保険<br>
       *     　pension: 個人年金保険<br>
       *     ・earthquake_non_life_insurance<br>
       *     　earthquake: 地震保険<br>
       *     　old_long_term_non_life: 旧長期損害保険<br>
       *     ・social_insurance<br>
       *     　national_pension: 国民年金<br>
       *     　national_pension_fund_premium: 国民年金基金<br>
       *     　national_health: 国民健康保険<br>
       *     　health: 健康保険<br>
       *     　care_insurance_deduction_of_pension: 介護保険<br>
       *     　employee_pension: 厚生年金<br>
       *     　advanced_elderly_medical: 後期高齢者医療保険<br>
       *     　none: その他（印刷後に手書き）<br>
       *     ・other_insurance<br>
       *     　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br>
       *     　idc: 個人型確定拠出年金（iDeCo）<br>
       *     　cdc: 企業型確定拠出年金<br>
       *     　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>
       * @example life
       * @enum {string}
       */
      category:
        | 'life'
        | 'care'
        | 'pension'
        | 'earthquake'
        | 'old_long_term_non_life'
        | 'national_pension'
        | 'national_pension_fund_premium'
        | 'national_health'
        | 'care_insurance_deduction_of_pension'
        | 'health'
        | 'employee_pension'
        | 'advanced_elderly_medical'
        | 'sema'
        | 'idc'
        | 'cdc'
        | 'dsma'
        | 'none'
      /**
       * @description 新旧区分<br>
       *     区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br>
       *     上記以外の保険では none を指定してください。
       * @enum {string}
       */
      new_or_old: 'new' | 'old' | 'none'
      /**
       * @description 保険会社等の名称<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example freee生命保険株式会社
       */
      company_name?: string | null
      /**
       * @description 保険等の種類（目的）<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 利差配当付終身
       */
      kind_of_purpose?: string | null
      /**
       * @description 保険期間又は年金支払期間<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 終身
       * @enum {string|null}
       */
      period?:
        | '終身'
        | '0年'
        | '1年'
        | '2年'
        | '3年'
        | '4年'
        | '5年'
        | '6年'
        | '7年'
        | '8年'
        | '9年'
        | '10年'
        | '11年'
        | '12年'
        | '13年'
        | '14年'
        | '15年'
        | '16年'
        | '17年'
        | '18年'
        | '19年'
        | '20年'
        | '21年'
        | '22年'
        | '23年'
        | '24年'
        | '25年'
        | '26年'
        | '27年'
        | '28年'
        | '29年'
        | '30年'
        | '31年'
        | '32年'
        | '33年'
        | '34年'
        | '35年'
        | '36年'
        | '37年'
        | '38年'
        | '39年'
        | '40年'
        | '41年'
        | '42年'
        | '43年'
        | '44年'
        | '45年'
        | '46年'
        | '47年'
        | '48年'
        | '49年'
        | '50年'
        | '51年'
        | '52年'
        | '53年'
        | '54年'
        | '55年'
        | '56年'
        | '57年'
        | '58年'
        | '59年'
        | '60年'
        | '61年'
        | '62年'
        | '63年'
        | '64年'
        | '65年'
        | '66年'
        | '67年'
        | '68年'
        | '69年'
        | '70年'
        | '71年'
        | '72年'
        | '73年'
        | '74年'
        | '75年'
        | '76年'
        | '77年'
        | '78年'
        | '79年'
        | '80年'
        | '81年'
        | '82年'
        | '83年'
        | '84年'
        | '85年'
        | '86年'
        | '87年'
        | '88年'
        | '89年'
        | '90年'
        | '91年'
        | '92年'
        | '93年'
        | '94年'
        | '95年'
        | '96年'
        | '97年'
        | '98年'
        | '99年'
        | '100年'
        | ''
        | null
      /**
       * @description 保険等の契約者 姓<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 契約
       */
      policyholder_last_name?: string | null
      /**
       * @description 保険等の契約者 名<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 太郎
       */
      policyholder_first_name?: string | null
      /**
       * @description 保険金等の受取人 姓<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 受取
       */
      recipient_last_name?: string | null
      /**
       * @description 保険金等の受取人 名<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 太郎
       */
      recipient_first_name?: string | null
      /**
       * @description 保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, "": 空欄<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example child
       * @enum {string|null}
       */
      recipient_relationship?:
        | 'myself'
        | 'husband'
        | 'wife'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
        | ''
        | null
      /**
       * @description 年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br>
       *     区分が個人年金保険の時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 2000-04-01
       */
      payment_start_date?: string | null
      /**
       * @description 保険料額
       * @example 1000000
       */
      amount: number
    }
    'ApiV1EmployeeYearendAdjustmentController.update_insurance_response': {
      insurances?: components['schemas']['ApiV1EmployeeYearendAdjustmentInsuranceSerializer'][]
    }
    ApiV1EmployeeYearendAdjustmentInsuranceSerializer: {
      /** @description 保険料id */
      id?: number
      /**
       * @description 保険の種類 life_care_pension_insurance: 生命保険・介護医療保険・個人年金保険, earthquake_non_life_insurance: 地震保険・旧長期損害保険, social_insurance: 社会保険, other_insurance: その他の保険（小規模企業共済等）
       * @enum {string}
       */
      type?:
        | 'life_care_pension_insurance'
        | 'earthquake_non_life_insurance'
        | 'social_insurance'
        | 'other_insurance'
      /**
       * @description 区分<br>
       *     保険会社等が発行する証明書類に基づいて区分を設定してください。<br>
       *     保険の種類によって設定可能な値が変わります。<br>
       *     ・life_care_pension_insurance<br>
       *     　life: 生命保険<br>
       *     　care: 介護保険<br>
       *     　pension: 個人年金保険<br>
       *     ・earthquake_non_life_insurance<br>
       *     　earthquake: 地震保険<br>
       *     　old_long_term_non_life: 旧長期損害保険<br>
       *     ・social_insurance<br>
       *     　national_pension: 国民年金<br>
       *     　national_pension_fund_premium: 国民年金基金<br>
       *     　national_health: 国民健康保険<br>
       *     　health: 健康保険<br>
       *     　care_insurance_deduction_of_pension: 介護保険<br>
       *     　employee_pension: 厚生年金<br>
       *     　advanced_elderly_medical: 後期高齢者医療保険<br>
       *     　none: その他（印刷後に手書き）<br>
       *     ・other_insurance<br>
       *     　sema: 独立行政法人中小企業基盤整備機構の共済契約の掛金<br>
       *     　idc: 個人型確定拠出年金（iDeCo）<br>
       *     　cdc: 企業型確定拠出年金<br>
       *     　dsma: 心身障害者扶養共済制度に関する契約の掛金<br>
       * @example life
       * @enum {string}
       */
      category?:
        | 'life'
        | 'care'
        | 'pension'
        | 'earthquake'
        | 'old_long_term_non_life'
        | 'national_pension'
        | 'national_pension_fund_premium'
        | 'national_health'
        | 'care_insurance_deduction_of_pension'
        | 'health'
        | 'employee_pension'
        | 'advanced_elderly_medical'
        | 'sema'
        | 'idc'
        | 'cdc'
        | 'dsma'
        | 'none'
      /**
       * @description 新旧区分<br>
       *     区分が生命保険または個人年金保険の時のみ、新制度なら new を、旧制度なら old を指定します。<br>
       *     上記以外の保険では none を指定してください。
       * @enum {string}
       */
      new_or_old?: 'new' | 'old' | 'none'
      /**
       * @description 保険会社等の名称<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example freee生命保険株式会社
       */
      company_name?: string | null
      /**
       * @description 保険等の種類（目的）<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 利差配当付終身
       */
      kind_of_purpose?: string | null
      /**
       * @description 保険期間又は年金支払期間<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 終身
       * @enum {string|null}
       */
      period?:
        | '終身'
        | '0年'
        | '1年'
        | '2年'
        | '3年'
        | '4年'
        | '5年'
        | '6年'
        | '7年'
        | '8年'
        | '9年'
        | '10年'
        | '11年'
        | '12年'
        | '13年'
        | '14年'
        | '15年'
        | '16年'
        | '17年'
        | '18年'
        | '19年'
        | '20年'
        | '21年'
        | '22年'
        | '23年'
        | '24年'
        | '25年'
        | '26年'
        | '27年'
        | '28年'
        | '29年'
        | '30年'
        | '31年'
        | '32年'
        | '33年'
        | '34年'
        | '35年'
        | '36年'
        | '37年'
        | '38年'
        | '39年'
        | '40年'
        | '41年'
        | '42年'
        | '43年'
        | '44年'
        | '45年'
        | '46年'
        | '47年'
        | '48年'
        | '49年'
        | '50年'
        | '51年'
        | '52年'
        | '53年'
        | '54年'
        | '55年'
        | '56年'
        | '57年'
        | '58年'
        | '59年'
        | '60年'
        | '61年'
        | '62年'
        | '63年'
        | '64年'
        | '65年'
        | '66年'
        | '67年'
        | '68年'
        | '69年'
        | '70年'
        | '71年'
        | '72年'
        | '73年'
        | '74年'
        | '75年'
        | '76年'
        | '77年'
        | '78年'
        | '79年'
        | '80年'
        | '81年'
        | '82年'
        | '83年'
        | '84年'
        | '85年'
        | '86年'
        | '87年'
        | '88年'
        | '89年'
        | '90年'
        | '91年'
        | '92年'
        | '93年'
        | '94年'
        | '95年'
        | '96年'
        | '97年'
        | '98年'
        | '99年'
        | '100年'
        | ''
        | null
      /**
       * @description 保険等の契約者 姓<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 契約
       */
      policyholder_last_name?: string | null
      /**
       * @description 保険等の契約者 名<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険または地震保険・旧長期損害保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 太郎
       */
      policyholder_first_name?: string | null
      /**
       * @description 保険金等の受取人 姓<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 受取
       */
      recipient_last_name?: string | null
      /**
       * @description 保険金等の受取人 名<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 太郎
       */
      recipient_first_name?: string | null
      /**
       * @description 保険金等の受取人 あなたとの続柄 myself: 本人, husband: 夫, wife: 妻, father: 父, mother: 母, child: 子, senior_brother: 兄, junior_brother: 弟, senior_sister: 姉, junior_sister: 妹, grandchild: 孫, grandfather: 祖父, grandmother: 祖母, father_in_law: 義父, mother_in_law: 義母, grandfather_in_law: 義祖父, grandmother_in_law: 義祖母, other: その他, "": 空欄<br>
       *     保険の種類にて、生命保険・介護医療保険・個人年金保険、地震保険・旧長期損害保険または社会保険を選択している時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example child
       * @enum {string|null}
       */
      recipient_relationship?:
        | 'myself'
        | 'husband'
        | 'wife'
        | 'father'
        | 'mother'
        | 'child'
        | 'senior_brother'
        | 'junior_brother'
        | 'senior_sister'
        | 'junior_sister'
        | 'grandchild'
        | 'grandfather'
        | 'grandmother'
        | 'father_in_law'
        | 'mother_in_law'
        | 'grandfather_in_law'
        | 'grandmother_in_law'
        | 'other'
        | ''
        | null
      /**
       * @description 年金の支払開始日 1900年1月1日から現在年+100の12月31日まで登録可能。<br>
       *     区分が個人年金保険の時のみ、入力した値が反映されます。<br>
       *     上記以外の保険では入力した値は反映されません。
       * @example 2000-04-01
       */
      payment_start_date?: string | null
      /**
       * @description 保険料額
       * @example 1000000
       */
      amount?: number
    }
    'ApiV1EmployeeYearendAdjustmentController.update_housing_loan_body': {
      /**
       * Format: int32
       * @description 更新対象事業所ID（必須）
       * @example 1
       */
      company_id: number
      housing_loan: components['schemas']['ApiV1EmployeeYearendAdjustmentHousingLoanUpdateRequestSerializer']
    }
    ApiV1EmployeeYearendAdjustmentHousingLoanUpdateRequestSerializer: {
      /**
       * Format: date
       * @description 居住開始の年月日 2000年1月1日から現在年+5の12月31日まで登録可能
       * @example 2022-03-31
       */
      residence_start_date: string
      /**
       * @description 住宅借入金等年末残高
       * @example 5000000
       */
      remaining_balance_at_yearend: number
      /**
       * @description 住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除
       * @enum {string}
       */
      category: 'general' | 'qualified' | 'extension' | 'earthquake'
      /**
       * @description 特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家
       * @enum {string}
       */
      specific_case_type:
        | 'not_qualified'
        | 'specified'
        | 'special_specified_or_special_exception'
        | 'exception_special_exception'
        | 'special_residential_house'
    }
    'ApiV1EmployeeYearendAdjustmentController.update_housing_loan_response': {
      /**
       * Format: int32
       * @description 住宅借入金等特別控除
       * @example 500000
       */
      housing_loan_deduction?: number
      /** @description 住宅ローン */
      housing_loans?: components['schemas']['ApiV1EmployeeYearendAdjustmentHousingLoanSerializer'][]
    }
    ApiV1EmployeeYearendAdjustmentHousingLoanSerializer: {
      /**
       * Format: int32
       * @description 住宅ローンID
       * @example 1
       */
      id?: number
      /**
       * Format: date
       * @description 居住開始の年月日
       * @example 2022-03-31
       */
      residence_start_date?: string
      /**
       * @description 住宅借入金等年末残高
       * @example 5000000
       */
      remaining_balance_at_yearend?: number
      /**
       * @description 住宅借入金等特別控除区分 general: 住: 一般の住宅借入金等, qualified: 認: 認定住宅の新築等, extension: 増: 特定増改築等, earthquake: 震: 震災特例法による特別控除
       * @enum {string}
       */
      category?: 'general' | 'qualified' | 'extension' | 'earthquake'
      /**
       * @description 特定取得/特別特定取得 not_qualified: 該当しない, specified: 特定取得, special_specified_or_special_exception: 特別特定取得または特別特例取得, exception_special_exception: 特例特別特例取得 special_residential_house 特家
       * @enum {string}
       */
      specific_case_type?:
        | 'not_qualified'
        | 'specified'
        | 'special_specified_or_special_exception'
        | 'exception_special_exception'
        | 'special_residential_house'
    }
    ApiV1EmployeesAssignedAttendanceTagSerializer: {
      attendance_tag: {
        /**
         * Format: int32
         * @description 勤怠タグID
         * @example 1
         */
        id: number
        /**
         * Format: int32
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 勤怠タグ名称
         * @example 勤怠タグの名称
         */
        name: string
        /**
         * @description 勤怠タグ備考
         * @example 勤怠タグの備考
         */
        description: string
        /**
         * Format: int32
         * @description 勤怠タグ回数上限
         * @example 1
         */
        max_amount: number
        /**
         * @description 勤怠タグ公開ステータス
         * @example true
         */
        published: boolean
        /**
         * @description 対象従業員が利用可能かどうか
         * @example true
         */
        is_employee_usable: boolean
      }
      /**
       * Format: int32
       * @description 勤怠タグ回数
       * @example 1
       */
      amount: number
    }
    'ApiV1EmployeesAttendanceTagsController.index_response': {
      employee_attendance_tags?: components['schemas']['ApiV1EmployeesAttendanceTagSerializer'][]
    }
    'ApiV1EmployeesAttendanceTagsController.show_response': {
      employee_attendance_tags?: components['schemas']['ApiV1EmployeesAssignedAttendanceTagSerializer'][]
    }
    'ApiV1EmployeesAttendanceTagsController.update_body': {
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /** @description 更新対象の勤怠タグのリスト */
      employee_attendance_tags: components['schemas']['ApiV1EmployeesAttendanceTagUpdateRequestSerializer'][]
    }
    ApiV1EmployeesAttendanceTagSerializer: {
      /**
       * Format: int32
       * @description 勤怠タグID
       * @example 1
       */
      id: number
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /**
       * @description 勤怠タグ名称
       * @example 勤怠タグの名称
       */
      name: string
      /**
       * @description 勤怠タグ備考
       * @example 勤怠タグの備考
       */
      description: string
      /**
       * Format: int32
       * @description 勤怠タグ回数上限
       * @example 1
       */
      max_amount: number
      /**
       * @description 勤怠タグ公開ステータス
       * @example true
       */
      published: boolean
      /**
       * @description 対象従業員が利用可能かどうか
       * @example true
       */
      is_employee_usable: boolean
    }
    ApiV1EmployeesAttendanceTagUpdateRequestSerializer: {
      /**
       * Format: int32
       * @description 勤怠タグID
       * @example 1
       */
      attendance_tag_id: number
      /**
       * Format: int32
       * @description 勤怠タグ回数
       * @example 1
       */
      amount: number
    }
    'ApiV1EmployeesAttendanceTagSummariesController.show_response': {
      employee_attendance_tag_summaries?: components['schemas']['ApiV1EmployeesAttendanceTagSummary'][]
    }
    'ApiV1EmployeesAttendanceTagSummariesController.update_body': {
      /**
       * Format: int32
       * @description 事業所ID
       * @example 1
       */
      company_id: number
      /** @description 更新対象の勤怠タグサマリのリスト */
      employee_attendance_tag_summaries: components['schemas']['ApiV1EmployeesAttendanceTagSummaryUpdateRequestSerializer'][]
    }
    'ApiV1EmployeesAttendanceTagSummariesController.update_response': {
      employee_attendance_tag_summaries?: components['schemas']['ApiV1EmployeesAttendanceTagSummary'][]
    }
    ApiV1EmployeesAttendanceTagSummary: {
      attendance_tag: {
        /**
         * Format: int32
         * @description 勤怠タグID
         * @example 1
         */
        id: number
        /**
         * Format: int32
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 勤怠タグ名称
         * @example 勤怠タグの名称
         */
        name: string
        /**
         * @description 勤怠タグ備考
         * @example 勤怠タグの備考
         */
        description: string
        /**
         * Format: int32
         * @description 勤怠タグ回数上限
         * @example 1
         */
        max_amount: number
        /**
         * @description 勤怠タグ公開ステータス
         * @example true
         */
        published: boolean
        /**
         * @description 対象従業員が利用可能かどうか
         * @example true
         */
        is_employee_usable: boolean
      }
      /**
       * Format: int32
       * @description 勤怠タグ回数
       * @example 1
       */
      amount: number
    }
    ApiV1EmployeesAttendanceTagSummaryUpdateRequestSerializer: {
      /**
       * Format: int32
       * @description 勤怠タグID
       * @example 1
       */
      attendance_tag_id: number
      /**
       * Format: int32
       * @description 勤怠タグ回数
       * @example 1
       */
      amount: number
    }
    error: {
      /** @example 400 */
      status_code?: number
      errors?: {
        type?: string
        messages?: string[]
      }[]
    }
    unauthorizedError: {
      /** @example ログインをしてください。 */
      message?: string
      messages?: string
    }
    forbiddenError: {
      /** @example 403 */
      status_code?: number
      errors?: {
        type?: string
        messages?: string[]
      }[]
    }
    accessDeniedError: {
      /** @example access_denied */
      error?: string
      /** @example アクセスする権限がありません */
      message?: string
      /** @example expired_access_token */
      code?: string
    }
    notfoundError: {
      /** @example 404 */
      status_code?: number
      errors?: {
        /** @example not_found */
        type?: string
        messages?: string[]
      }[]
    }
    internalServerError: {
      /** @example 500 */
      status_code?: number
      errors?: {
        /** @example internal_server_error */
        type?: string
        messages?: string[]
      }[]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  get_users_me: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1UsersMeSerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_company_employees: {
    parameters: {
      query?: {
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
        /**
         * @description trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
         * @example true
         */
        with_no_payroll_calculation?: boolean
      }
      header?: never
      path: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1CompaniesEmployeeSerializer'][]
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employees: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 従業員情報を取得したい年
         * @example 2021
         */
        year: number
        /**
         * @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>
         * @example 1
         */
        month: number
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
        /**
         * @description trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
         * @example true
         */
        with_no_payroll_calculation?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesIndexSerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_employee: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesController.create_body']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesController.create_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 従業員情報を取得したい年
         * @example 2021
         */
        year: number
        /**
         * @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br>
         * @example 1
         */
        month: number
      }
      header?: never
      path: {
        /**
         * @description 従業員ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_employee: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 従業員ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_profile_rule: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesProfileRulesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_profile_rule: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesProfileRulesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesProfileRulesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_health_insurance_rule: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesHealthInsuranceRulesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_health_insurance_rule: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesHealthInsuranceRulesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesHealthInsuranceRulesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_welfare_pension_insurance_rule: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRulesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_welfare_pension_insurance_rule: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRulesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesWelfarePensionInsuranceRulesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_dependent_rules: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesDependentRulesController.index_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  bulk_update_employee_dependent_rules: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesDependentRulesController.bulk_update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesDependentRulesController.bulk_update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_bank_account_rule: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesBankAccountRulesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_bank_account_rule: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesBankAccountRulesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesBankAccountRulesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_basic_pay_rule: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesBasicPayRulesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_basic_pay_rule: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesBasicPayRulesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesBasicPayRulesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_profile_custom_fields_rule: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月<br>
         *     締日支払日設定が翌月払いの従業員情報の場合は、 指定したmonth + 1の値が検索結果として返します。<br>
         *     翌月払いの従業員の2022/01の従業員情報を取得する場合は、year=2021,month=12を指定してください。<br> */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesProfileCustomFieldRulesController.index_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_work_record: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 従業員情報を取得したい年月日(YYYY-MM-DD)(例:2018-08-01) */
        date: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesWorkRecordSerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_work_record: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 更新対象年月日(YYYY-MM-DD)(例:2018-08-01) */
        date: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesWorkRecordsController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesWorkRecordSerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_employee_work_record: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 削除対象年月日(YYYY-MM-DD)(例:2018-08-01) */
        date: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_work_record_summary: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description サマリ情報に日次の勤怠情報を含める(true/false)(デフォルト: false) */
        work_records?: boolean
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月 */
        month: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesWorkRecordSummarySerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employee_work_record_summary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 更新対象年 */
        year: number
        /** @description 更新対象月 */
        month: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesWorkRecordSummaryController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesWorkRecordSummarySerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_time_clocks: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 取得する打刻期間の開始日(YYYY-MM-DD)(例:2018-08-01)(デフォルト: 当月の打刻開始日) */
        from_date?: string
        /** @description 取得する打刻期間の終了日(YYYY-MM-DD)(例:2018-08-31)(デフォルト: 当日) */
        to_date?: string
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesTimeClocksController.index_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_employee_time_clock: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesTimeClocksController.create_body']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesTimeClocksController.create_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_time_clock: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 打刻ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesTimeClocksController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_time_clocks_available_types: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年月日(YYYY-MM-DD)(例:2018-08-01)(デフォルト：当日) */
        date?: string
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesTimeClocksController.available_types_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employees_special_holidays: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 対象日
         * @example 2023-04-01
         */
        date?: string
        /**
         * @description 対象開始日
         * @example 2023-04-01
         */
        start_date?: string
        /**
         * @description 対象終了日
         * @example 2023-04-01
         */
        end_date?: string
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            employee_special_holidays?: {
              /**
               * Format: int32
               * @description 特別休暇付与ID
               * @example 1
               */
              id?: number
              /**
               * Format: int32
               * @description 事業所ID
               * @example 1
               */
              company_id?: number
              /**
               * Format: int32
               * @description 従業員ID
               * @example 1
               */
              employee_id?: number
              /**
               * Format: int32
               * @description 特別休暇設定ID
               * @example 1
               */
              special_holiday_setting_id?: number
              /**
               * @description 特別休暇名称
               * @example 育休
               */
              name?: string
              /**
               * @description 特別休暇・休業休職種別名
               * @example 育児休業日
               */
              type_name?: string
              /**
               * @description 有給・無給区分（paid: 有給、unpaid: 無休）
               * @example paid
               * @enum {string}
               */
              paid_type?: 'paid' | 'unpaid'
              /**
               * @description 出勤率計算方法（in_workdays: 出勤日数に含める、not_in_workdays: 出勤日数に含めない、not_in_total_workdays: 全労働日に含めない）
               * @example in_workdays
               * @enum {string}
               */
              attendance_rate_calc_type?:
                | 'in_workdays'
                | 'not_in_workdays'
                | 'not_in_total_workdays'
              /**
               * @description 最小消化単位（full: 全休、half: 半休、hour: 時間休）
               * @example half
               * @enum {string}
               */
              usage_day?: 'full' | 'half' | 'hour'
              /**
               * Format: date
               * @description 有効期間開始日(YYYY-MM-DD)(例:2023-01-01)
               */
              valid_date_from?: string
              /**
               * Format: date
               * @description 有効期間終了日(YYYY-MM-DD)(例:2023-01-31)
               */
              valid_date_to?: string
              /**
               * Format: int32
               * @description 付与日数
               * @example 2
               */
              days?: number
              /**
               * Format: float
               * @description 使用数
               * @example 0.5
               */
              used?: number
              /** @description 使用日数・時間数 */
              num_days_and_hours_used?: {
                /**
                 * Format: float
                 * @description 日数
                 * @example 0.5
                 */
                days?: number
                /**
                 * Format: int32
                 * @description 時間数
                 * @example 0
                 */
                hours?: number
              }
              /**
               * Format: float
               * @description 残数
               * @example 1.5
               */
              left?: number
              /** @description 残日数・時間数 */
              num_days_and_hours_left?: {
                /**
                 * Format: float
                 * @description 日数
                 * @example 1.5
                 */
                days?: number
                /**
                 * Format: int32
                 * @description 時間数
                 * @example 0
                 */
                hours?: number
              }
            }[]
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employees_attendance_tag_summaries: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 勤怠タグサマリを取得したい年 */
        year: number
        /** @description 勤怠タグサマリを取得したい月 */
        month: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesAttendanceTagSummariesController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employees_attendance_tag_summaries: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 勤怠タグサマリを更新したい年 */
        year: number
        /** @description 勤怠タグサマリを更新したい月 */
        month: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesAttendanceTagSummariesController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesAttendanceTagSummariesController.update_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employees_attendance_tags: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesAttendanceTagsController.index_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employees_attendance_tags_by_date: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 対象年月日(YYYY-MM-DD)(例:2018-08-01) */
        date: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeesAttendanceTagsController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_employees_attendance_tags: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
        /** @description 更新対象年月日(YYYY-MM-DD)(例:2018-08-01) */
        date: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeesAttendanceTagsController.update_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            employee_attendance_tags?: components['schemas']['ApiV1EmployeesAssignedAttendanceTagSerializer'][]
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_salaries_employee_payroll_statements: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月 */
        month: number
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1SalariesEmployeePayrollStatementsController.index_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_salaries_employee_payroll_statement: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月 */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1SalariesEmployeePayrollStatementsController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_bonuses_employee_payroll_statements: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月 */
        month: number
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1BonusesEmployeePayrollStatementsIndexSerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_bonuses_employee_payroll_statement: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 従業員情報を取得したい年 */
        year: number
        /** @description 従業員情報を取得したい月 */
        month: number
      }
      header?: never
      path: {
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1BonusesEmployeePayrollStatementsController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_employee_group_memberships: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 指定日。指定日付時点における所属情報をリストで返します。(YYYY-MM-DD)(例:2018-07-31)
         * @example 2018-07-31
         */
        base_date: string
        /**
         * @description trueを指定すると給与計算対象外の従業員情報をレスポンスに含めます。
         * @example true
         */
        with_no_payroll_calculation?: boolean
        /** @description 取得対象とする従業員IDを指定することができます。指定しない場合は全従業員が対象となります。
         *     (例:1,2,3,4,5)
         *      */
        employee_ids?: string
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeGroupMembershipsIndexSerializer']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_groups: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1GroupsIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_group: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1GroupCreateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1GroupResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_group: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 部門ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1GroupUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1GroupResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_group: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 部門ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_positions: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PositionIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_position: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1PositionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PositionResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_position: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 役職ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1PositionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PositionResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_position: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 役職ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_monthly_attendances: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /** @description 申請ステータス
         *     - `draft` - 下書き
         *     - `in_progress` - 申請中
         *     - `approved` - 承認済
         *     - `feedback` - 差戻し */
        status?: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 申請No
         * @example 1
         */
        application_number?: number
        /**
         * @description 申請開始日
         * @example 2022-02-01
         */
        start_issue_date?: string
        /**
         * @description 申請終了日
         * @example 2022-02-01
         */
        end_issue_date?: string
        /**
         * @description 現在承認ステップの承認者のユーザーID
         *
         *     approver_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません
         *
         * @example 1
         */
        approver_id?: number
        /**
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id?: number
        /**
         * @description 対象開始日
         * @example 2022-02-01
         */
        start_target_date?: string
        /**
         * @description 対象終了日
         * @example 2022-02-01
         */
        end_target_date?: string
        /**
         * @description 自動チェック結果
         *     - trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。
         *     - falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。
         *     - キーごと指定しない場合、すべての申請を返却します。
         * @example false
         */
        passed_auto_check?: boolean
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1MonthlyAttendanceIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_approval_requests_monthly_attendance: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1MonthlyAttendanceCreateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1MonthlyAttendanceResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_monthly_attendance: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /** @description 月次勤怠締め申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1MonthlyAttendanceResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_approval_requests_monthly_attendance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 月次勤怠締め申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1MonthlyAttendanceUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1MonthlyAttendanceResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_approval_requests_monthly_attendance: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 月次勤怠締め申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  action_approval_requests_monthly_attendance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description 月次勤怠締め申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1ApprovalActionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1MonthlyAttendanceResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_work_times: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /** @description 申請ステータス
         *     - `draft` - 下書き
         *     - `in_progress` - 申請中
         *     - `approved` - 承認済
         *     - `feedback` - 差戻し */
        status?: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 申請No
         * @example 1
         */
        application_number?: number
        /**
         * @description 申請開始日
         * @example 2023-04-01
         */
        start_issue_date?: string
        /**
         * @description 申請終了日
         * @example 2023-04-01
         */
        end_issue_date?: string
        /**
         * @description 現在承認ステップの承認者のユーザーID
         *     approver_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません
         *
         * @example 1
         */
        approver_id?: number
        /**
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id?: number
        /**
         * @description 対象開始日
         * @example 2023-04-01
         */
        start_target_date?: string
        /**
         * @description 対象終了日
         * @example 2023-04-01
         */
        end_target_date?: string
        /**
         * @description 自動チェック結果
         *     - trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。
         *     - falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。
         *     - キーごと指定しない場合、すべての申請を返却します。
         * @example false
         */
        passed_auto_check?: boolean
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
        /** @description 時間表記を48時間形式で返却するか
         *     - `true` を指定した場合、時間表記を48時間形式で返却します。（推奨）
         *     - `false` を指定した場合、時間表記を24時間形式で返却します。
         *     - 勤務終了時間が翌日の01:00の場合
         *       - true: 25:00
         *       - false: 01:00 */
        use_48h_time_notation?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            work_times: components['schemas']['ApiV1WorkTimeIndexResponseParams'][]
            /**
             * Format: int32
             * @description 合計件数
             * @example 1
             */
            total_count: number
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_approval_requests_work_time: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: int32
           * @description 事業所ID（必須）
           * @example 1
           */
          company_id: number
          /**
           * Format: date
           * @description 対象日（必須）
           */
          target_date: string
          /**
           * @description false: 勤務時間を修正する
           *     true: 勤務時間を削除する
           *
           *     勤務時間を削除する場合は以下のパラメータは指定しないでください。
           *     - clock_in_at
           *     - clock_out_at
           *     - lateness_mins
           *     - early_leaving_mins
           *     - break_records
           * @default false
           */
          clear_work_time?: boolean
          /**
           * @description 勤務開始時間
           *
           *     複数の勤務を指定できないため非推奨です。 `work_records` を利用してください。
           * @example 12:00
           */
          clock_in_at?: string
          /**
           * @description 勤務終了時間
           *
           *     複数の勤務を指定できないため非推奨です。 `work_records` を利用してください。
           * @example 23:59
           */
          clock_out_at?: string
          /** @description 勤務時間のリスト */
          work_records?: components['schemas']['ApiV1WorkTimeIndexResponseParams']['work_records']['items'][]
          /**
           * Format: int32
           * @description 遅刻分の時間（分単位）
           */
          lateness_mins?: number
          /**
           * Format: int32
           * @description 早退分の時間（分単位）
           */
          early_leaving_mins?: number
          /** @description 休憩時間のリスト */
          break_records?: components['schemas']['ApiV1WorkTimeIndexResponseParams']['break_records']['items'][]
          /**
           * @description 申請理由
           * @example 申請理由
           */
          comment?: string
          /**
           * Format: int32
           * @description 申請経路ID（必須）
           * @example 1
           */
          approval_flow_route_id: number
          /**
           * Format: int32
           * @description 承認者のユーザーID
           * @example 1
           */
          approver_id?: number
          /**
           * @description 時間表記を48時間形式で返却するか
           *     - `true` を指定した場合、時間表記を48時間形式で返却します。（推奨）
           *     - `false` を指定した場合、時間表記を24時間形式で返却します。
           *     - 勤務終了時間が翌日の01:00の場合
           *       - true: 25:00
           *       - false: 01:00
           * @default false
           */
          use_48h_time_notation?: boolean
        }
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            work_time: components['schemas']['ApiV1WorkTimeResponseParams']
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_work_time: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /** @description 時間表記を48時間形式で返却するか
         *     - `true` を指定した場合、時間表記を48時間形式で返却します。（推奨）
         *     - `false` を指定した場合、時間表記を24時間形式で返却します。
         *     - 勤務終了時間が翌日の01:00の場合
         *       - true: 25:00
         *       - false: 01:00 */
        use_48h_time_notation?: boolean
      }
      header?: never
      path: {
        /** @description 勤務時間修正申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': paths['/api/v1/approval_requests/work_times']['post']['responses']['201']['content']['application/json']['schema']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_approval_requests_work_time: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 勤務時間修正申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': paths['/api/v1/approval_requests/work_times']['post']['requestBody']['content']['application/json']['schema']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': paths['/api/v1/approval_requests/work_times']['post']['responses']['201']['content']['application/json']['schema']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_approval_requests_work_time: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 勤務時間修正申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  action_approval_requests_work_time: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description 勤務時間修正申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1ApprovalActionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': paths['/api/v1/approval_requests/work_times']['post']['responses']['201']['content']['application/json']['schema']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_paid_holidays: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /** @description 申請ステータス
         *     - `draft` - 下書き
         *     - `in_progress` - 申請中
         *     - `approved` - 承認済
         *     - `feedback` - 差戻し */
        status?: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 申請No
         * @example 1
         */
        application_number?: number
        /**
         * @description 申請開始日
         * @example 2022-02-01
         */
        start_issue_date?: string
        /**
         * @description 申請終了日
         * @example 2022-02-01
         */
        end_issue_date?: string
        /**
         * @description 現在承認ステップの承認者のユーザーID
         *
         *     approver_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません
         *
         * @example 1
         */
        approver_id?: number
        /**
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id?: number
        /**
         * @description 対象開始日
         * @example 2022-02-01
         */
        start_target_date?: string
        /**
         * @description 対象終了日
         * @example 2022-02-01
         */
        end_target_date?: string
        /**
         * @description 自動チェック結果
         *     - trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。
         *     - falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。
         *     - キーごと指定しない場合、すべての申請を返却します。
         * @example false
         */
        passed_auto_check?: boolean
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PaidHolidayIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_approval_requests_paid_holiday: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1PaidHolidayRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PaidHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_paid_holiday: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /** @description 有給申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PaidHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_approval_requests_paid_holiday: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 有給申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1PaidHolidayRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PaidHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_approval_requests_paid_holiday: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 有給申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  action_approval_requests_paid_holiday: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description 有給申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1ApprovalActionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1PaidHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_special_holidays: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /** @description 申請ステータス
         *     - `draft` - 下書き
         *     - `in_progress` - 申請中
         *     - `approved` - 承認済
         *     - `feedback` - 差戻し */
        status?: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 申請No
         * @example 1
         */
        application_number?: number
        /**
         * @description 申請開始日
         * @example 2022-02-01
         */
        start_issue_date?: string
        /**
         * @description 申請終了日
         * @example 2022-02-01
         */
        end_issue_date?: string
        /**
         * @description 現在承認ステップの承認者のユーザーID
         *
         *     approver_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません
         *
         * @example 1
         */
        approver_id?: number
        /**
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id?: number
        /**
         * @description 対象開始日
         * @example 2022-02-01
         */
        start_target_date?: string
        /**
         * @description 対象終了日
         * @example 2022-02-01
         */
        end_target_date?: string
        /**
         * @description 自動チェック結果
         *     - trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。
         *     - falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。
         *     - キーごと指定しない場合、すべての申請を返却します。
         * @example false
         */
        passed_auto_check?: boolean
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1specialHolidayIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_approval_requests_special_holiday: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1specialHolidayRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1specialHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_special_holiday: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /** @description 特別休暇申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1specialHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_approval_requests_special_holiday: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 特別休暇申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1specialHolidayRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1specialHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_approval_requests_special_holiday: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 特別休暇申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  action_approval_requests_special_holiday: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description 特別休暇申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1ApprovalActionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1specialHolidayResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_overtime_works: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /** @description 申請ステータス
         *     - `draft` - 下書き
         *     - `in_progress` - 申請中
         *     - `approved` - 承認済
         *     - `feedback` - 差戻し */
        status?: 'draft' | 'in_progress' | 'approved' | 'feedback'
        /**
         * @description 申請No
         * @example 1
         */
        application_number?: number
        /**
         * @description 申請開始日
         * @example 2022-02-01
         */
        start_issue_date?: string
        /**
         * @description 申請終了日
         * @example 2022-02-01
         */
        end_issue_date?: string
        /**
         * @description 現在承認ステップの承認者のユーザーID
         *
         *     approver_idに値を指定する場合、指定なしの申請経路を利用した申請は返却されません
         *
         * @example 1
         */
        approver_id?: number
        /**
         * @description 申請者のユーザーID
         * @example 1
         */
        applicant_id?: number
        /**
         * @description 対象開始日
         * @example 2022-02-01
         */
        start_target_date?: string
        /**
         * @description 対象終了日
         * @example 2022-02-01
         */
        end_target_date?: string
        /**
         * @description 自動チェック結果
         *     - trueを指定した場合、自動チェック結果がtrueの申請のみ返却します。
         *     - falseを指定した場合、自動チェック結果がfalseの申請のみ返却します。
         *     - キーごと指定しない場合、すべての申請を返却します。
         * @example false
         */
        passed_auto_check?: boolean
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1OvertimeWorkIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  create_approval_requests_overtime_work: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1OvertimeWorkRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1OvertimeWorkResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_overtime_work: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /** @description 残業申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1OvertimeWorkResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  update_approval_requests_overtime_work: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 残業申請ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1OvertimeWorkRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1OvertimeWorkResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_approval_requests_overtime_work: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
      }
      header?: never
      path: {
        /**
         * @description 残業申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  action_approval_requests_overtime_work: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description 残業申請ID
         * @example 1
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1ApprovalActionRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1OvertimeWorkResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_requests_overtime_work_setting: {
    parameters: {
      query: {
        /**
         * @description 事業所ID
         * @example 1
         */
        company_id: number
        /**
         * @description 対象日(YYYY-MM-DD)(例:2018-08-01)
         *     - 申請の対象日を指定してください。
         * @example 2018-08-01
         */
        date: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /**
             * Format: date-time
             * @description 所定出勤時刻
             * @example 12:00
             */
            start_at?: string
            /**
             * Format: date-time
             * @description 所定退勤時刻
             * @example 23:59
             */
            end_at?: string
            /**
             * @description 勤務カレンダーに反映するかどうか
             * @example true
             */
            should_reflect_in_work_record: boolean
            /** @description 早出に指定できる分の単位 */
            early_work_mins_unit?: number[]
            /** @description 残業に指定できる分の単位 */
            overtime_work_mins_unit?: number[]
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_flow_routes: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 経路に含まれるユーザーのユーザーID */
        included_user_id?: number
        /** @description 申請種別（申請経路を使用できる申請種別を示します。例えば、AttendanceWorkflow の場合は、勤怠申請で使用できる申請経路です。）
         *     - `AttendanceWorkflow` - 勤怠申請
         *     - `PersonalDataWorkflow` - 身上変更申請 */
        usage?: 'AttendanceWorkflow' | 'PersonalDataWorkflow'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1ApprovalFlowRoutesIndexResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_approval_flow_route: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 申請経路ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1ApprovalFlowRouteResponse']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_yearend_adjustment_employees: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
        /** @description 取得レコードの件数 (デフォルト: 50, 最小: 1, 最大: 100) */
        limit?: number
        /** @description 取得レコードのオフセット (デフォルト: 0) */
        offset?: number
      }
      header?: never
      path: {
        /** @description 年末調整対象を取得したい年 */
        year: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.index_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  get_yearend_adjustment_employee: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 年末調整を取得したい年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.show_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_employee: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_employee_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_employee_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_payroll_and_bonus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_payroll_and_bonus_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_payroll_and_bonus_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_dependents: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_dependents_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_dependents_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_previous_job: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_previous_job_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_previous_job_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_yearend_adjustment_previous_job: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  post_yearend_adjustment_insurances: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 作成対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_insurance_body']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_insurance_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_insurances: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
        /** @description 保険料ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_insurance_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_insurance_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_yearend_adjustment_insurances: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
        /** @description 保険料ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_housing_loan_deduction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: int32
           * @description 更新対象事業所ID（必須）
           * @example 1
           */
          company_id: number
          /**
           * Format: int32
           * @description 住宅借入金等特別控除（必須）
           * @example 1
           */
          housing_loan_deduction: number
        }
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': {
            /**
             * Format: int32
             * @description 住宅借入金等特別控除
             * @example 1
             */
            housing_loan_deduction?: number
            /** @description 住宅ローン */
            housing_loans?: components['schemas']['ApiV1EmployeeYearendAdjustmentHousingLoanSerializer'][]
          }
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  post_yearend_adjustment_housing_loan: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 作成対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_housing_loan_body']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_housing_loan_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  put_yearend_adjustment_housing_loan: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
        /** @description 住宅ローンID */
        id: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_housing_loan_body']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiV1EmployeeYearendAdjustmentController.update_housing_loan_response']
        }
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
  destroy_yearend_adjustment_housing_loan: {
    parameters: {
      query: {
        /** @description 事業所ID */
        company_id: number
      }
      header?: never
      path: {
        /** @description 更新対象年 */
        year: number
        /** @description 従業員ID */
        employee_id: number
        /** @description 住宅ローンID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['error']
        }
      }
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['unauthorizedError']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['forbiddenError']
          'application/json': components['schemas']['accessDeniedError']
        }
      }
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['notfoundError']
        }
      }
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/problem+json': components['schemas']['internalServerError']
        }
      }
    }
  }
}
